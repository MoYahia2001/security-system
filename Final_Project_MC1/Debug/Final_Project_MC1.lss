
Final_Project_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003044  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a2  00800060  00003044  000030d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800102  00800102  0000317a  2**0
                  ALLOC
  3 .stab         00002ca0  00000000  00000000  0000317c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011ce  00000000  00000000  00005e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000712a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000729a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ab7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000acdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000af69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b737  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 30       	cpi	r26, 0x02	; 2
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e0       	ldi	r26, 0x02	; 2
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 31       	cpi	r26, 0x1D	; 29
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 20 18 	jmp	0x3040	; 0x3040 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ef       	ldi	r26, 0xF2	; 242
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 ef       	ldi	r24, 0xF2	; 242
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
/*******************************************************************************
 *                               Main Function                                 *
 *******************************************************************************/

void main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	 * Baud rate = 9600 kbps
	 * Eight bits data mode
	 * One stop bit
	 * No parity bits
	 */
	UART_ConfigType UART = { eight_bits, disable, one_bit, 9600 };
     b5a:	9e 01       	movw	r18, r28
     b5c:	2f 5f       	subi	r18, 0xFF	; 255
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	3b 87       	std	Y+11, r19	; 0x0b
     b62:	2a 87       	std	Y+10, r18	; 0x0a
     b64:	8b ef       	ldi	r24, 0xFB	; 251
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	9d 87       	std	Y+13, r25	; 0x0d
     b6a:	8c 87       	std	Y+12, r24	; 0x0c
     b6c:	97 e0       	ldi	r25, 0x07	; 7
     b6e:	9e 87       	std	Y+14, r25	; 0x0e
     b70:	ec 85       	ldd	r30, Y+12	; 0x0c
     b72:	fd 85       	ldd	r31, Y+13	; 0x0d
     b74:	00 80       	ld	r0, Z
     b76:	2c 85       	ldd	r18, Y+12	; 0x0c
     b78:	3d 85       	ldd	r19, Y+13	; 0x0d
     b7a:	2f 5f       	subi	r18, 0xFF	; 255
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
     b7e:	3d 87       	std	Y+13, r19	; 0x0d
     b80:	2c 87       	std	Y+12, r18	; 0x0c
     b82:	ea 85       	ldd	r30, Y+10	; 0x0a
     b84:	fb 85       	ldd	r31, Y+11	; 0x0b
     b86:	00 82       	st	Z, r0
     b88:	2a 85       	ldd	r18, Y+10	; 0x0a
     b8a:	3b 85       	ldd	r19, Y+11	; 0x0b
     b8c:	2f 5f       	subi	r18, 0xFF	; 255
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	3b 87       	std	Y+11, r19	; 0x0b
     b92:	2a 87       	std	Y+10, r18	; 0x0a
     b94:	3e 85       	ldd	r19, Y+14	; 0x0e
     b96:	31 50       	subi	r19, 0x01	; 1
     b98:	3e 87       	std	Y+14, r19	; 0x0e
     b9a:	8e 85       	ldd	r24, Y+14	; 0x0e
     b9c:	88 23       	and	r24, r24
     b9e:	41 f7       	brne	.-48     	; 0xb70 <main+0x2a>
	UART_init(&UART);
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <UART_init>

	LCD_init();  //LCD initialization
     ba8:	0e 94 a4 11 	call	0x2348	; 0x2348 <LCD_init>
	/*
	 * Display "Enter new password"
	 * Display "re-enter password"
	 * Check the password match
	 */
	GetNewPass_ReEnterPass_Check();
     bac:	0e 94 6d 06 	call	0xcda	; 0xcda <GetNewPass_ReEnterPass_Check>


	UART_sendByte(STORE_PASS); //Send flag to MC2 to store password
     bb0:	81 e6       	ldi	r24, 0x61	; 97
     bb2:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <UART_sendByte>
	SendPass();  //Function to send password to MC2
     bb6:	0e 94 db 08 	call	0x11b6	; 0x11b6 <SendPass>

	while (1)
	{
		switch (currentState)
     bba:	80 91 02 01 	lds	r24, 0x0102
     bbe:	e8 2f       	mov	r30, r24
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	f9 87       	std	Y+9, r31	; 0x09
     bc4:	e8 87       	std	Y+8, r30	; 0x08
     bc6:	28 85       	ldd	r18, Y+8	; 0x08
     bc8:	39 85       	ldd	r19, Y+9	; 0x09
     bca:	21 30       	cpi	r18, 0x01	; 1
     bcc:	31 05       	cpc	r19, r1
     bce:	01 f1       	breq	.+64     	; 0xc10 <main+0xca>
     bd0:	88 85       	ldd	r24, Y+8	; 0x08
     bd2:	99 85       	ldd	r25, Y+9	; 0x09
     bd4:	82 30       	cpi	r24, 0x02	; 2
     bd6:	91 05       	cpc	r25, r1
     bd8:	09 f4       	brne	.+2      	; 0xbdc <main+0x96>
     bda:	49 c0       	rjmp	.+146    	; 0xc6e <main+0x128>
     bdc:	e8 85       	ldd	r30, Y+8	; 0x08
     bde:	f9 85       	ldd	r31, Y+9	; 0x09
     be0:	30 97       	sbiw	r30, 0x00	; 0
     be2:	59 f7       	brne	.-42     	; 0xbba <main+0x74>
		{
		 case 0:
			DisplayMainOptions(); /* display on LCD (+) open door or (-) change pass */
     be4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DisplayMainOptions>
			press = KEYPAD_getPressedKey(); // Get pressed key from keypad
     be8:	0e 94 ac 10 	call	0x2158	; 0x2158 <KEYPAD_getPressedKey>
     bec:	80 93 1b 01 	sts	0x011B, r24
			if (press == '+')
     bf0:	80 91 1b 01 	lds	r24, 0x011B
     bf4:	8b 32       	cpi	r24, 0x2B	; 43
     bf6:	21 f4       	brne	.+8      	; 0xc00 <main+0xba>
			{
				currentState = 1;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	80 93 02 01 	sts	0x0102, r24
     bfe:	dd cf       	rjmp	.-70     	; 0xbba <main+0x74>
			}
			else if (press == '-')
     c00:	80 91 1b 01 	lds	r24, 0x011B
     c04:	8d 32       	cpi	r24, 0x2D	; 45
     c06:	c9 f6       	brne	.-78     	; 0xbba <main+0x74>
			{
				currentState = 2;
     c08:	82 e0       	ldi	r24, 0x02	; 2
     c0a:	80 93 02 01 	sts	0x0102, r24
     c0e:	d5 cf       	rjmp	.-86     	; 0xbba <main+0x74>
			}
			break;

		case 1:
			EnterPass();               // Function to enter password
     c10:	0e 94 3e 09 	call	0x127c	; 0x127c <EnterPass>
			UART_sendByte(CHECK_PASS); // Send flag to MC2 to check password
     c14:	82 e6       	ldi	r24, 0x62	; 98
     c16:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <UART_sendByte>
			SendPass();                // Send password by UART to MC2 to check
     c1a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <SendPass>
			//receive from MC2 if password is correct or not
			receivedResponse = UART_recieveByte();
     c1e:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <UART_recieveByte>
     c22:	80 93 1c 01 	sts	0x011C, r24
			if (receivedResponse == CORRECT_PASSWORD)
     c26:	80 91 1c 01 	lds	r24, 0x011C
     c2a:	89 37       	cpi	r24, 0x79	; 121
     c2c:	19 f4       	brne	.+6      	; 0xc34 <main+0xee>
			{
				// Function that triggers motor in MC2
				OpenDoor();
     c2e:	0e 94 14 09 	call	0x1228	; 0x1228 <OpenDoor>
     c32:	c3 cf       	rjmp	.-122    	; 0xbba <main+0x74>
			}
			else
			{
				counter1++;
     c34:	80 91 03 01 	lds	r24, 0x0103
     c38:	8f 5f       	subi	r24, 0xFF	; 255
     c3a:	80 93 03 01 	sts	0x0103, r24
				if (counter1 == 3)
     c3e:	80 91 03 01 	lds	r24, 0x0103
     c42:	83 30       	cpi	r24, 0x03	; 3
     c44:	09 f0       	breq	.+2      	; 0xc48 <main+0x102>
     c46:	b9 cf       	rjmp	.-142    	; 0xbba <main+0x74>
				{

					LCD_clearScreen();
     c48:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_clearScreen>
					LCD_displayString("Thief!          ");
     c4c:	80 e6       	ldi	r24, 0x60	; 96
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <LCD_displayString>
					UART_sendByte(ALARM);      // Send flag to MC2 to trigger alarm
     c54:	85 e6       	ldi	r24, 0x65	; 101
     c56:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <UART_sendByte>
					// wait for flag form MC2 that alarm ended
					if (UART_recieveByte() == FINISHED_ALARM)
     c5a:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <UART_recieveByte>
     c5e:	8d 36       	cpi	r24, 0x6D	; 109
     c60:	09 f0       	breq	.+2      	; 0xc64 <main+0x11e>
     c62:	ab cf       	rjmp	.-170    	; 0xbba <main+0x74>
					{
						//return to display menu
						currentState = 0;
     c64:	10 92 02 01 	sts	0x0102, r1
						counter1 = 0;
     c68:	10 92 03 01 	sts	0x0103, r1
     c6c:	a6 cf       	rjmp	.-180    	; 0xbba <main+0x74>
				}
			}
			break;

		case 2:
			EnterOldPass();    			     // Function to enter old password
     c6e:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <EnterOldPass>
			UART_sendByte(CHECK_OLD_PASS);   // Send flag to MC2 to check old password from EEPROM
     c72:	87 e6       	ldi	r24, 0x67	; 103
     c74:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <UART_sendByte>
			SendPass();                      // Send password by UART to MC2 to check
     c78:	0e 94 db 08 	call	0x11b6	; 0x11b6 <SendPass>
			//receive from MC2 if password is correct or not
			receivedResponse = UART_recieveByte();
     c7c:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <UART_recieveByte>
     c80:	80 93 1c 01 	sts	0x011C, r24
			if (receivedResponse == CORRECT_PASSWORD)
     c84:	80 91 1c 01 	lds	r24, 0x011C
     c88:	89 37       	cpi	r24, 0x79	; 121
     c8a:	51 f4       	brne	.+20     	; 0xca0 <main+0x15a>
				/*
				 * Display "Enter new password"
				 * Display "re-enter password"
				 * Check the password match
				 */
				GetNewPass_ReEnterPass_Check();
     c8c:	0e 94 6d 06 	call	0xcda	; 0xcda <GetNewPass_ReEnterPass_Check>
				//Send flag to MC2 to store password
				UART_sendByte(STORE_PASS);
     c90:	81 e6       	ldi	r24, 0x61	; 97
     c92:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <UART_sendByte>
				//Function to send password
				SendPass();
     c96:	0e 94 db 08 	call	0x11b6	; 0x11b6 <SendPass>
				currentState = 0;
     c9a:	10 92 02 01 	sts	0x0102, r1
     c9e:	8d cf       	rjmp	.-230    	; 0xbba <main+0x74>
			}
			else
			{
				counter2++;
     ca0:	80 91 04 01 	lds	r24, 0x0104
     ca4:	8f 5f       	subi	r24, 0xFF	; 255
     ca6:	80 93 04 01 	sts	0x0104, r24
				if (counter2 == 3)
     caa:	80 91 04 01 	lds	r24, 0x0104
     cae:	83 30       	cpi	r24, 0x03	; 3
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <main+0x16e>
     cb2:	83 cf       	rjmp	.-250    	; 0xbba <main+0x74>
				{
					LCD_clearScreen();
     cb4:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_clearScreen>
					LCD_displayString("Thief!          ");
     cb8:	80 e6       	ldi	r24, 0x60	; 96
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <LCD_displayString>
					UART_sendByte(ALARM);   // Send flag to MC2 to trigger alarm
     cc0:	85 e6       	ldi	r24, 0x65	; 101
     cc2:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <UART_sendByte>

					// wait for flag form MC2 that alarm ended
					if (UART_recieveByte() == FINISHED_ALARM)
     cc6:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <UART_recieveByte>
     cca:	8d 36       	cpi	r24, 0x6D	; 109
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <main+0x18a>
     cce:	75 cf       	rjmp	.-278    	; 0xbba <main+0x74>
					{
						//return to display menu
						currentState = 0;
     cd0:	10 92 02 01 	sts	0x0102, r1
						counter2 = 0;
     cd4:	10 92 04 01 	sts	0x0104, r1
     cd8:	70 cf       	rjmp	.-288    	; 0xbba <main+0x74>

00000cda <GetNewPass_ReEnterPass_Check>:
 * Display "Enter new password"
 * Display "re-enter password"
 * Check the password match
 */
void GetNewPass_ReEnterPass_Check()
{
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	ee 97       	sbiw	r28, 0x3e	; 62
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61

	do
	{

		LCD_clearScreen();
     cf2:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_clearScreen>
		LCD_moveCursor(0, 0);
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <LCD_moveCursor>
		LCD_displayString("Enter New Pass:");
     cfe:	81 e7       	ldi	r24, 0x71	; 113
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <LCD_displayString>
		LCD_moveCursor(1, 0);
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <LCD_moveCursor>

		for (int i = 0; i < PASSWORD_SIZE; i++)
     d0e:	1e ae       	std	Y+62, r1	; 0x3e
     d10:	1d ae       	std	Y+61, r1	; 0x3d
     d12:	88 c0       	rjmp	.+272    	; 0xe24 <GetNewPass_ReEnterPass_Check+0x14a>
		{
			password[i] = KEYPAD_getPressedKey();   //Store each entered number from keypad in array
     d14:	0d ad       	ldd	r16, Y+61	; 0x3d
     d16:	1e ad       	ldd	r17, Y+62	; 0x3e
     d18:	0e 94 ac 10 	call	0x2158	; 0x2158 <KEYPAD_getPressedKey>
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	c8 01       	movw	r24, r16
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	fc 01       	movw	r30, r24
     d28:	e9 5f       	subi	r30, 0xF9	; 249
     d2a:	fe 4f       	sbci	r31, 0xFE	; 254
     d2c:	31 83       	std	Z+1, r19	; 0x01
     d2e:	20 83       	st	Z, r18
			LCD_displayCharacter('*');
     d30:	8a e2       	ldi	r24, 0x2A	; 42
     d32:	0e 94 bb 13 	call	0x2776	; 0x2776 <LCD_displayCharacter>
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	aa e7       	ldi	r26, 0x7A	; 122
     d3c:	b5 e4       	ldi	r27, 0x45	; 69
     d3e:	8d ab       	std	Y+53, r24	; 0x35
     d40:	9e ab       	std	Y+54, r25	; 0x36
     d42:	af ab       	std	Y+55, r26	; 0x37
     d44:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d46:	6d a9       	ldd	r22, Y+53	; 0x35
     d48:	7e a9       	ldd	r23, Y+54	; 0x36
     d4a:	8f a9       	ldd	r24, Y+55	; 0x37
     d4c:	98 ad       	ldd	r25, Y+56	; 0x38
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	4a e7       	ldi	r20, 0x7A	; 122
     d54:	53 e4       	ldi	r21, 0x43	; 67
     d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	89 ab       	std	Y+49, r24	; 0x31
     d60:	9a ab       	std	Y+50, r25	; 0x32
     d62:	ab ab       	std	Y+51, r26	; 0x33
     d64:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d66:	69 a9       	ldd	r22, Y+49	; 0x31
     d68:	7a a9       	ldd	r23, Y+50	; 0x32
     d6a:	8b a9       	ldd	r24, Y+51	; 0x33
     d6c:	9c a9       	ldd	r25, Y+52	; 0x34
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	40 e8       	ldi	r20, 0x80	; 128
     d74:	5f e3       	ldi	r21, 0x3F	; 63
     d76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d7a:	88 23       	and	r24, r24
     d7c:	2c f4       	brge	.+10     	; 0xd88 <GetNewPass_ReEnterPass_Check+0xae>
		__ticks = 1;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	98 ab       	std	Y+48, r25	; 0x30
     d84:	8f a7       	std	Y+47, r24	; 0x2f
     d86:	3f c0       	rjmp	.+126    	; 0xe06 <GetNewPass_ReEnterPass_Check+0x12c>
	else if (__tmp > 65535)
     d88:	69 a9       	ldd	r22, Y+49	; 0x31
     d8a:	7a a9       	ldd	r23, Y+50	; 0x32
     d8c:	8b a9       	ldd	r24, Y+51	; 0x33
     d8e:	9c a9       	ldd	r25, Y+52	; 0x34
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	3f ef       	ldi	r19, 0xFF	; 255
     d94:	4f e7       	ldi	r20, 0x7F	; 127
     d96:	57 e4       	ldi	r21, 0x47	; 71
     d98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d9c:	18 16       	cp	r1, r24
     d9e:	4c f5       	brge	.+82     	; 0xdf2 <GetNewPass_ReEnterPass_Check+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da0:	6d a9       	ldd	r22, Y+53	; 0x35
     da2:	7e a9       	ldd	r23, Y+54	; 0x36
     da4:	8f a9       	ldd	r24, Y+55	; 0x37
     da6:	98 ad       	ldd	r25, Y+56	; 0x38
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 e2       	ldi	r20, 0x20	; 32
     dae:	51 e4       	ldi	r21, 0x41	; 65
     db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     db4:	dc 01       	movw	r26, r24
     db6:	cb 01       	movw	r24, r22
     db8:	bc 01       	movw	r22, r24
     dba:	cd 01       	movw	r24, r26
     dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	98 ab       	std	Y+48, r25	; 0x30
     dc6:	8f a7       	std	Y+47, r24	; 0x2f
     dc8:	0f c0       	rjmp	.+30     	; 0xde8 <GetNewPass_ReEnterPass_Check+0x10e>
     dca:	89 e1       	ldi	r24, 0x19	; 25
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	9e a7       	std	Y+46, r25	; 0x2e
     dd0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dd2:	8d a5       	ldd	r24, Y+45	; 0x2d
     dd4:	9e a5       	ldd	r25, Y+46	; 0x2e
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	f1 f7       	brne	.-4      	; 0xdd6 <GetNewPass_ReEnterPass_Check+0xfc>
     dda:	9e a7       	std	Y+46, r25	; 0x2e
     ddc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dde:	8f a5       	ldd	r24, Y+47	; 0x2f
     de0:	98 a9       	ldd	r25, Y+48	; 0x30
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	98 ab       	std	Y+48, r25	; 0x30
     de6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de8:	8f a5       	ldd	r24, Y+47	; 0x2f
     dea:	98 a9       	ldd	r25, Y+48	; 0x30
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	69 f7       	brne	.-38     	; 0xdca <GetNewPass_ReEnterPass_Check+0xf0>
     df0:	14 c0       	rjmp	.+40     	; 0xe1a <GetNewPass_ReEnterPass_Check+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df2:	69 a9       	ldd	r22, Y+49	; 0x31
     df4:	7a a9       	ldd	r23, Y+50	; 0x32
     df6:	8b a9       	ldd	r24, Y+51	; 0x33
     df8:	9c a9       	ldd	r25, Y+52	; 0x34
     dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	98 ab       	std	Y+48, r25	; 0x30
     e04:	8f a7       	std	Y+47, r24	; 0x2f
     e06:	8f a5       	ldd	r24, Y+47	; 0x2f
     e08:	98 a9       	ldd	r25, Y+48	; 0x30
     e0a:	9c a7       	std	Y+44, r25	; 0x2c
     e0c:	8b a7       	std	Y+43, r24	; 0x2b
     e0e:	8b a5       	ldd	r24, Y+43	; 0x2b
     e10:	9c a5       	ldd	r25, Y+44	; 0x2c
     e12:	01 97       	sbiw	r24, 0x01	; 1
     e14:	f1 f7       	brne	.-4      	; 0xe12 <GetNewPass_ReEnterPass_Check+0x138>
     e16:	9c a7       	std	Y+44, r25	; 0x2c
     e18:	8b a7       	std	Y+43, r24	; 0x2b
		LCD_clearScreen();
		LCD_moveCursor(0, 0);
		LCD_displayString("Enter New Pass:");
		LCD_moveCursor(1, 0);

		for (int i = 0; i < PASSWORD_SIZE; i++)
     e1a:	8d ad       	ldd	r24, Y+61	; 0x3d
     e1c:	9e ad       	ldd	r25, Y+62	; 0x3e
     e1e:	01 96       	adiw	r24, 0x01	; 1
     e20:	9e af       	std	Y+62, r25	; 0x3e
     e22:	8d af       	std	Y+61, r24	; 0x3d
     e24:	8d ad       	ldd	r24, Y+61	; 0x3d
     e26:	9e ad       	ldd	r25, Y+62	; 0x3e
     e28:	85 30       	cpi	r24, 0x05	; 5
     e2a:	91 05       	cpc	r25, r1
     e2c:	0c f4       	brge	.+2      	; 0xe30 <GetNewPass_ReEnterPass_Check+0x156>
     e2e:	72 cf       	rjmp	.-284    	; 0xd14 <GetNewPass_ReEnterPass_Check+0x3a>
			password[i] = KEYPAD_getPressedKey();   //Store each entered number from keypad in array
			LCD_displayCharacter('*');
			_delay_ms(4000);
		}

		while (KEYPAD_getPressedKey() != '=');
     e30:	0e 94 ac 10 	call	0x2158	; 0x2158 <KEYPAD_getPressedKey>
     e34:	8d 33       	cpi	r24, 0x3D	; 61
     e36:	e1 f7       	brne	.-8      	; 0xe30 <GetNewPass_ReEnterPass_Check+0x156>
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	aa e7       	ldi	r26, 0x7A	; 122
     e3e:	b5 e4       	ldi	r27, 0x45	; 69
     e40:	8f a3       	std	Y+39, r24	; 0x27
     e42:	98 a7       	std	Y+40, r25	; 0x28
     e44:	a9 a7       	std	Y+41, r26	; 0x29
     e46:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e48:	6f a1       	ldd	r22, Y+39	; 0x27
     e4a:	78 a5       	ldd	r23, Y+40	; 0x28
     e4c:	89 a5       	ldd	r24, Y+41	; 0x29
     e4e:	9a a5       	ldd	r25, Y+42	; 0x2a
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	4a e7       	ldi	r20, 0x7A	; 122
     e56:	53 e4       	ldi	r21, 0x43	; 67
     e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	8b a3       	std	Y+35, r24	; 0x23
     e62:	9c a3       	std	Y+36, r25	; 0x24
     e64:	ad a3       	std	Y+37, r26	; 0x25
     e66:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e68:	6b a1       	ldd	r22, Y+35	; 0x23
     e6a:	7c a1       	ldd	r23, Y+36	; 0x24
     e6c:	8d a1       	ldd	r24, Y+37	; 0x25
     e6e:	9e a1       	ldd	r25, Y+38	; 0x26
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e8       	ldi	r20, 0x80	; 128
     e76:	5f e3       	ldi	r21, 0x3F	; 63
     e78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e7c:	88 23       	and	r24, r24
     e7e:	2c f4       	brge	.+10     	; 0xe8a <GetNewPass_ReEnterPass_Check+0x1b0>
		__ticks = 1;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	9a a3       	std	Y+34, r25	; 0x22
     e86:	89 a3       	std	Y+33, r24	; 0x21
     e88:	3f c0       	rjmp	.+126    	; 0xf08 <GetNewPass_ReEnterPass_Check+0x22e>
	else if (__tmp > 65535)
     e8a:	6b a1       	ldd	r22, Y+35	; 0x23
     e8c:	7c a1       	ldd	r23, Y+36	; 0x24
     e8e:	8d a1       	ldd	r24, Y+37	; 0x25
     e90:	9e a1       	ldd	r25, Y+38	; 0x26
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	3f ef       	ldi	r19, 0xFF	; 255
     e96:	4f e7       	ldi	r20, 0x7F	; 127
     e98:	57 e4       	ldi	r21, 0x47	; 71
     e9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e9e:	18 16       	cp	r1, r24
     ea0:	4c f5       	brge	.+82     	; 0xef4 <GetNewPass_ReEnterPass_Check+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea2:	6f a1       	ldd	r22, Y+39	; 0x27
     ea4:	78 a5       	ldd	r23, Y+40	; 0x28
     ea6:	89 a5       	ldd	r24, Y+41	; 0x29
     ea8:	9a a5       	ldd	r25, Y+42	; 0x2a
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	40 e2       	ldi	r20, 0x20	; 32
     eb0:	51 e4       	ldi	r21, 0x41	; 65
     eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	bc 01       	movw	r22, r24
     ebc:	cd 01       	movw	r24, r26
     ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	9a a3       	std	Y+34, r25	; 0x22
     ec8:	89 a3       	std	Y+33, r24	; 0x21
     eca:	0f c0       	rjmp	.+30     	; 0xeea <GetNewPass_ReEnterPass_Check+0x210>
     ecc:	89 e1       	ldi	r24, 0x19	; 25
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	98 a3       	std	Y+32, r25	; 0x20
     ed2:	8f 8f       	std	Y+31, r24	; 0x1f
     ed4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ed6:	98 a1       	ldd	r25, Y+32	; 0x20
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <GetNewPass_ReEnterPass_Check+0x1fe>
     edc:	98 a3       	std	Y+32, r25	; 0x20
     ede:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee0:	89 a1       	ldd	r24, Y+33	; 0x21
     ee2:	9a a1       	ldd	r25, Y+34	; 0x22
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	9a a3       	std	Y+34, r25	; 0x22
     ee8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eea:	89 a1       	ldd	r24, Y+33	; 0x21
     eec:	9a a1       	ldd	r25, Y+34	; 0x22
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	69 f7       	brne	.-38     	; 0xecc <GetNewPass_ReEnterPass_Check+0x1f2>
     ef2:	14 c0       	rjmp	.+40     	; 0xf1c <GetNewPass_ReEnterPass_Check+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef4:	6b a1       	ldd	r22, Y+35	; 0x23
     ef6:	7c a1       	ldd	r23, Y+36	; 0x24
     ef8:	8d a1       	ldd	r24, Y+37	; 0x25
     efa:	9e a1       	ldd	r25, Y+38	; 0x26
     efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	9a a3       	std	Y+34, r25	; 0x22
     f06:	89 a3       	std	Y+33, r24	; 0x21
     f08:	89 a1       	ldd	r24, Y+33	; 0x21
     f0a:	9a a1       	ldd	r25, Y+34	; 0x22
     f0c:	9e 8f       	std	Y+30, r25	; 0x1e
     f0e:	8d 8f       	std	Y+29, r24	; 0x1d
     f10:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f12:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	f1 f7       	brne	.-4      	; 0xf14 <GetNewPass_ReEnterPass_Check+0x23a>
     f18:	9e 8f       	std	Y+30, r25	; 0x1e
     f1a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(4000);

		LCD_clearScreen();
     f1c:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_clearScreen>
		LCD_moveCursor(0, 0);
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <LCD_moveCursor>
		LCD_displayString("Re-Enter Pass:");
     f28:	81 e8       	ldi	r24, 0x81	; 129
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <LCD_displayString>
		LCD_moveCursor(1, 0);
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <LCD_moveCursor>

		for (int i = 0; i < PASSWORD_SIZE; i++)
     f38:	1c ae       	std	Y+60, r1	; 0x3c
     f3a:	1b ae       	std	Y+59, r1	; 0x3b
     f3c:	88 c0       	rjmp	.+272    	; 0x104e <GetNewPass_ReEnterPass_Check+0x374>
		{
			confirmationPassword[i] = KEYPAD_getPressedKey();  //Store each entered number from keypad in array
     f3e:	0b ad       	ldd	r16, Y+59	; 0x3b
     f40:	1c ad       	ldd	r17, Y+60	; 0x3c
     f42:	0e 94 ac 10 	call	0x2158	; 0x2158 <KEYPAD_getPressedKey>
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	c8 01       	movw	r24, r16
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	fc 01       	movw	r30, r24
     f52:	ef 5e       	subi	r30, 0xEF	; 239
     f54:	fe 4f       	sbci	r31, 0xFE	; 254
     f56:	31 83       	std	Z+1, r19	; 0x01
     f58:	20 83       	st	Z, r18
			LCD_displayCharacter('*');
     f5a:	8a e2       	ldi	r24, 0x2A	; 42
     f5c:	0e 94 bb 13 	call	0x2776	; 0x2776 <LCD_displayCharacter>
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	aa e7       	ldi	r26, 0x7A	; 122
     f66:	b5 e4       	ldi	r27, 0x45	; 69
     f68:	89 8f       	std	Y+25, r24	; 0x19
     f6a:	9a 8f       	std	Y+26, r25	; 0x1a
     f6c:	ab 8f       	std	Y+27, r26	; 0x1b
     f6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f70:	69 8d       	ldd	r22, Y+25	; 0x19
     f72:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f74:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f76:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	4a e7       	ldi	r20, 0x7A	; 122
     f7e:	53 e4       	ldi	r21, 0x43	; 67
     f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	8d 8b       	std	Y+21, r24	; 0x15
     f8a:	9e 8b       	std	Y+22, r25	; 0x16
     f8c:	af 8b       	std	Y+23, r26	; 0x17
     f8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f90:	6d 89       	ldd	r22, Y+21	; 0x15
     f92:	7e 89       	ldd	r23, Y+22	; 0x16
     f94:	8f 89       	ldd	r24, Y+23	; 0x17
     f96:	98 8d       	ldd	r25, Y+24	; 0x18
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e8       	ldi	r20, 0x80	; 128
     f9e:	5f e3       	ldi	r21, 0x3F	; 63
     fa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fa4:	88 23       	and	r24, r24
     fa6:	2c f4       	brge	.+10     	; 0xfb2 <GetNewPass_ReEnterPass_Check+0x2d8>
		__ticks = 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	9c 8b       	std	Y+20, r25	; 0x14
     fae:	8b 8b       	std	Y+19, r24	; 0x13
     fb0:	3f c0       	rjmp	.+126    	; 0x1030 <GetNewPass_ReEnterPass_Check+0x356>
	else if (__tmp > 65535)
     fb2:	6d 89       	ldd	r22, Y+21	; 0x15
     fb4:	7e 89       	ldd	r23, Y+22	; 0x16
     fb6:	8f 89       	ldd	r24, Y+23	; 0x17
     fb8:	98 8d       	ldd	r25, Y+24	; 0x18
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	3f ef       	ldi	r19, 0xFF	; 255
     fbe:	4f e7       	ldi	r20, 0x7F	; 127
     fc0:	57 e4       	ldi	r21, 0x47	; 71
     fc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fc6:	18 16       	cp	r1, r24
     fc8:	4c f5       	brge	.+82     	; 0x101c <GetNewPass_ReEnterPass_Check+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fca:	69 8d       	ldd	r22, Y+25	; 0x19
     fcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fce:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e2       	ldi	r20, 0x20	; 32
     fd8:	51 e4       	ldi	r21, 0x41	; 65
     fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	bc 01       	movw	r22, r24
     fe4:	cd 01       	movw	r24, r26
     fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	9c 8b       	std	Y+20, r25	; 0x14
     ff0:	8b 8b       	std	Y+19, r24	; 0x13
     ff2:	0f c0       	rjmp	.+30     	; 0x1012 <GetNewPass_ReEnterPass_Check+0x338>
     ff4:	89 e1       	ldi	r24, 0x19	; 25
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	9a 8b       	std	Y+18, r25	; 0x12
     ffa:	89 8b       	std	Y+17, r24	; 0x11
     ffc:	89 89       	ldd	r24, Y+17	; 0x11
     ffe:	9a 89       	ldd	r25, Y+18	; 0x12
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	f1 f7       	brne	.-4      	; 0x1000 <GetNewPass_ReEnterPass_Check+0x326>
    1004:	9a 8b       	std	Y+18, r25	; 0x12
    1006:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1008:	8b 89       	ldd	r24, Y+19	; 0x13
    100a:	9c 89       	ldd	r25, Y+20	; 0x14
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	9c 8b       	std	Y+20, r25	; 0x14
    1010:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1012:	8b 89       	ldd	r24, Y+19	; 0x13
    1014:	9c 89       	ldd	r25, Y+20	; 0x14
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	69 f7       	brne	.-38     	; 0xff4 <GetNewPass_ReEnterPass_Check+0x31a>
    101a:	14 c0       	rjmp	.+40     	; 0x1044 <GetNewPass_ReEnterPass_Check+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    101c:	6d 89       	ldd	r22, Y+21	; 0x15
    101e:	7e 89       	ldd	r23, Y+22	; 0x16
    1020:	8f 89       	ldd	r24, Y+23	; 0x17
    1022:	98 8d       	ldd	r25, Y+24	; 0x18
    1024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	9c 8b       	std	Y+20, r25	; 0x14
    102e:	8b 8b       	std	Y+19, r24	; 0x13
    1030:	8b 89       	ldd	r24, Y+19	; 0x13
    1032:	9c 89       	ldd	r25, Y+20	; 0x14
    1034:	98 8b       	std	Y+16, r25	; 0x10
    1036:	8f 87       	std	Y+15, r24	; 0x0f
    1038:	8f 85       	ldd	r24, Y+15	; 0x0f
    103a:	98 89       	ldd	r25, Y+16	; 0x10
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	f1 f7       	brne	.-4      	; 0x103c <GetNewPass_ReEnterPass_Check+0x362>
    1040:	98 8b       	std	Y+16, r25	; 0x10
    1042:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_clearScreen();
		LCD_moveCursor(0, 0);
		LCD_displayString("Re-Enter Pass:");
		LCD_moveCursor(1, 0);

		for (int i = 0; i < PASSWORD_SIZE; i++)
    1044:	8b ad       	ldd	r24, Y+59	; 0x3b
    1046:	9c ad       	ldd	r25, Y+60	; 0x3c
    1048:	01 96       	adiw	r24, 0x01	; 1
    104a:	9c af       	std	Y+60, r25	; 0x3c
    104c:	8b af       	std	Y+59, r24	; 0x3b
    104e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1050:	9c ad       	ldd	r25, Y+60	; 0x3c
    1052:	85 30       	cpi	r24, 0x05	; 5
    1054:	91 05       	cpc	r25, r1
    1056:	0c f4       	brge	.+2      	; 0x105a <GetNewPass_ReEnterPass_Check+0x380>
    1058:	72 cf       	rjmp	.-284    	; 0xf3e <GetNewPass_ReEnterPass_Check+0x264>
			confirmationPassword[i] = KEYPAD_getPressedKey();  //Store each entered number from keypad in array
			LCD_displayCharacter('*');
			_delay_ms(4000);
		}

		while (KEYPAD_getPressedKey() != '=')
    105a:	0e 94 ac 10 	call	0x2158	; 0x2158 <KEYPAD_getPressedKey>
    105e:	8d 33       	cpi	r24, 0x3D	; 61
    1060:	e1 f7       	brne	.-8      	; 0x105a <GetNewPass_ReEnterPass_Check+0x380>
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	aa e7       	ldi	r26, 0x7A	; 122
    1068:	b5 e4       	ldi	r27, 0x45	; 69
    106a:	8b 87       	std	Y+11, r24	; 0x0b
    106c:	9c 87       	std	Y+12, r25	; 0x0c
    106e:	ad 87       	std	Y+13, r26	; 0x0d
    1070:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1072:	6b 85       	ldd	r22, Y+11	; 0x0b
    1074:	7c 85       	ldd	r23, Y+12	; 0x0c
    1076:	8d 85       	ldd	r24, Y+13	; 0x0d
    1078:	9e 85       	ldd	r25, Y+14	; 0x0e
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	4a e7       	ldi	r20, 0x7A	; 122
    1080:	53 e4       	ldi	r21, 0x43	; 67
    1082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	8f 83       	std	Y+7, r24	; 0x07
    108c:	98 87       	std	Y+8, r25	; 0x08
    108e:	a9 87       	std	Y+9, r26	; 0x09
    1090:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1092:	6f 81       	ldd	r22, Y+7	; 0x07
    1094:	78 85       	ldd	r23, Y+8	; 0x08
    1096:	89 85       	ldd	r24, Y+9	; 0x09
    1098:	9a 85       	ldd	r25, Y+10	; 0x0a
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e8       	ldi	r20, 0x80	; 128
    10a0:	5f e3       	ldi	r21, 0x3F	; 63
    10a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10a6:	88 23       	and	r24, r24
    10a8:	2c f4       	brge	.+10     	; 0x10b4 <GetNewPass_ReEnterPass_Check+0x3da>
		__ticks = 1;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	9e 83       	std	Y+6, r25	; 0x06
    10b0:	8d 83       	std	Y+5, r24	; 0x05
    10b2:	3f c0       	rjmp	.+126    	; 0x1132 <GetNewPass_ReEnterPass_Check+0x458>
	else if (__tmp > 65535)
    10b4:	6f 81       	ldd	r22, Y+7	; 0x07
    10b6:	78 85       	ldd	r23, Y+8	; 0x08
    10b8:	89 85       	ldd	r24, Y+9	; 0x09
    10ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	3f ef       	ldi	r19, 0xFF	; 255
    10c0:	4f e7       	ldi	r20, 0x7F	; 127
    10c2:	57 e4       	ldi	r21, 0x47	; 71
    10c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10c8:	18 16       	cp	r1, r24
    10ca:	4c f5       	brge	.+82     	; 0x111e <GetNewPass_ReEnterPass_Check+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e2       	ldi	r20, 0x20	; 32
    10da:	51 e4       	ldi	r21, 0x41	; 65
    10dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	bc 01       	movw	r22, r24
    10e6:	cd 01       	movw	r24, r26
    10e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	9e 83       	std	Y+6, r25	; 0x06
    10f2:	8d 83       	std	Y+5, r24	; 0x05
    10f4:	0f c0       	rjmp	.+30     	; 0x1114 <GetNewPass_ReEnterPass_Check+0x43a>
    10f6:	89 e1       	ldi	r24, 0x19	; 25
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	9c 83       	std	Y+4, r25	; 0x04
    10fc:	8b 83       	std	Y+3, r24	; 0x03
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	9c 81       	ldd	r25, Y+4	; 0x04
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	f1 f7       	brne	.-4      	; 0x1102 <GetNewPass_ReEnterPass_Check+0x428>
    1106:	9c 83       	std	Y+4, r25	; 0x04
    1108:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	9e 81       	ldd	r25, Y+6	; 0x06
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	9e 83       	std	Y+6, r25	; 0x06
    1112:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1114:	8d 81       	ldd	r24, Y+5	; 0x05
    1116:	9e 81       	ldd	r25, Y+6	; 0x06
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	69 f7       	brne	.-38     	; 0x10f6 <GetNewPass_ReEnterPass_Check+0x41c>
    111c:	14 c0       	rjmp	.+40     	; 0x1146 <GetNewPass_ReEnterPass_Check+0x46c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    111e:	6f 81       	ldd	r22, Y+7	; 0x07
    1120:	78 85       	ldd	r23, Y+8	; 0x08
    1122:	89 85       	ldd	r24, Y+9	; 0x09
    1124:	9a 85       	ldd	r25, Y+10	; 0x0a
    1126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	9e 83       	std	Y+6, r25	; 0x06
    1130:	8d 83       	std	Y+5, r24	; 0x05
    1132:	8d 81       	ldd	r24, Y+5	; 0x05
    1134:	9e 81       	ldd	r25, Y+6	; 0x06
    1136:	9a 83       	std	Y+2, r25	; 0x02
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	9a 81       	ldd	r25, Y+2	; 0x02
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <GetNewPass_ReEnterPass_Check+0x464>
    1142:	9a 83       	std	Y+2, r25	; 0x02
    1144:	89 83       	std	Y+1, r24	; 0x01
			;
		_delay_ms(4000);

		for (int j = 0; j < PASSWORD_SIZE; j++)
    1146:	1a ae       	std	Y+58, r1	; 0x3a
    1148:	19 ae       	std	Y+57, r1	; 0x39
    114a:	20 c0       	rjmp	.+64     	; 0x118c <GetNewPass_ReEnterPass_Check+0x4b2>
		{
			if (password[j] != confirmationPassword[j]) // Check if passwords are matching
    114c:	89 ad       	ldd	r24, Y+57	; 0x39
    114e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	fc 01       	movw	r30, r24
    1156:	e9 5f       	subi	r30, 0xF9	; 249
    1158:	fe 4f       	sbci	r31, 0xFE	; 254
    115a:	20 81       	ld	r18, Z
    115c:	31 81       	ldd	r19, Z+1	; 0x01
    115e:	89 ad       	ldd	r24, Y+57	; 0x39
    1160:	9a ad       	ldd	r25, Y+58	; 0x3a
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	fc 01       	movw	r30, r24
    1168:	ef 5e       	subi	r30, 0xEF	; 239
    116a:	fe 4f       	sbci	r31, 0xFE	; 254
    116c:	80 81       	ld	r24, Z
    116e:	91 81       	ldd	r25, Z+1	; 0x01
    1170:	28 17       	cp	r18, r24
    1172:	39 07       	cpc	r19, r25
    1174:	19 f0       	breq	.+6      	; 0x117c <GetNewPass_ReEnterPass_Check+0x4a2>
			{
				ifmatch = WRONGPASS;
    1176:	10 92 fa 00 	sts	0x00FA, r1
    117a:	0d c0       	rjmp	.+26     	; 0x1196 <GetNewPass_ReEnterPass_Check+0x4bc>
				break;
			}

			else
				ifmatch = TRUEPASS;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	80 93 fa 00 	sts	0x00FA, r24

		while (KEYPAD_getPressedKey() != '=')
			;
		_delay_ms(4000);

		for (int j = 0; j < PASSWORD_SIZE; j++)
    1182:	89 ad       	ldd	r24, Y+57	; 0x39
    1184:	9a ad       	ldd	r25, Y+58	; 0x3a
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	9a af       	std	Y+58, r25	; 0x3a
    118a:	89 af       	std	Y+57, r24	; 0x39
    118c:	89 ad       	ldd	r24, Y+57	; 0x39
    118e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1190:	85 30       	cpi	r24, 0x05	; 5
    1192:	91 05       	cpc	r25, r1
    1194:	dc f2       	brlt	.-74     	; 0x114c <GetNewPass_ReEnterPass_Check+0x472>
			else
				ifmatch = TRUEPASS;

		}

	} while (ifmatch == WRONGPASS);
    1196:	80 91 fa 00 	lds	r24, 0x00FA
    119a:	88 23       	and	r24, r24
    119c:	09 f4       	brne	.+2      	; 0x11a0 <GetNewPass_ReEnterPass_Check+0x4c6>
    119e:	a9 cd       	rjmp	.-1198   	; 0xcf2 <GetNewPass_ReEnterPass_Check+0x18>

}
    11a0:	ee 96       	adiw	r28, 0x3e	; 62
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	08 95       	ret

000011b6 <SendPass>:



//Function to send password to MC2
void SendPass()
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <SendPass+0x6>
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62

	for (int i = 0; i < PASSWORD_SIZE; i++)
    11c0:	1a 82       	std	Y+2, r1	; 0x02
    11c2:	19 82       	std	Y+1, r1	; 0x01
    11c4:	10 c0       	rjmp	.+32     	; 0x11e6 <SendPass+0x30>
		{
		  UART_sendByte(password[i]);
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	fc 01       	movw	r30, r24
    11d0:	e9 5f       	subi	r30, 0xF9	; 249
    11d2:	fe 4f       	sbci	r31, 0xFE	; 254
    11d4:	80 81       	ld	r24, Z
    11d6:	91 81       	ldd	r25, Z+1	; 0x01
    11d8:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <UART_sendByte>

//Function to send password to MC2
void SendPass()
{

	for (int i = 0; i < PASSWORD_SIZE; i++)
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	9a 81       	ldd	r25, Y+2	; 0x02
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	9a 83       	std	Y+2, r25	; 0x02
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ea:	85 30       	cpi	r24, 0x05	; 5
    11ec:	91 05       	cpc	r25, r1
    11ee:	5c f3       	brlt	.-42     	; 0x11c6 <SendPass+0x10>
		{
		  UART_sendByte(password[i]);
		}
}
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <DisplayMainOptions>:

/* display on LCD (+) open door or (-) change pass */
void DisplayMainOptions()
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
	LCD_moveCursor(0, 0);
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <LCD_moveCursor>
	LCD_displayString("+:open door     ");
    120a:	80 e9       	ldi	r24, 0x90	; 144
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <LCD_displayString>
	LCD_moveCursor(1, 0);
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <LCD_moveCursor>
	LCD_displayString("-:change pass   ");
    121a:	81 ea       	ldi	r24, 0xA1	; 161
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <LCD_displayString>

}
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <OpenDoor>:


// Function that triggers motor in MC2
void OpenDoor()
{
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1230:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_clearScreen>
	LCD_displayString("door is unlocked");
    1234:	82 eb       	ldi	r24, 0xB2	; 178
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <LCD_displayString>

	// Send flag to MC2 to rotate motor Clockwise
	UART_sendByte(ROTATE_MOTOR_CW);
    123c:	83 e6       	ldi	r24, 0x63	; 99
    123e:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <UART_sendByte>

	// Send flag to MC2 to rotate motor Clockwise
	if (UART_recieveByte() == FINISHED_ROTATING_CW)
    1242:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <UART_recieveByte>
    1246:	88 37       	cpi	r24, 0x78	; 120
    1248:	19 f4       	brne	.+6      	; 0x1250 <OpenDoor+0x28>
	{
		UART_sendByte(DELAY_3SEC);
    124a:	83 e7       	ldi	r24, 0x73	; 115
    124c:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <UART_sendByte>
	}
	if (UART_recieveByte() == FINISHED_DELAY)
    1250:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <UART_recieveByte>
    1254:	84 37       	cpi	r24, 0x74	; 116
    1256:	49 f4       	brne	.+18     	; 0x126a <OpenDoor+0x42>
	{
		LCD_clearScreen();
    1258:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_clearScreen>
		LCD_displayString("door is locked  ");
    125c:	83 ec       	ldi	r24, 0xC3	; 195
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <LCD_displayString>
		// Send flag to MC2 to rotate motor Clockwise
		UART_sendByte(ROTATE_MOTOR_ACW);
    1264:	84 e6       	ldi	r24, 0x64	; 100
    1266:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <UART_sendByte>
	}
	if (UART_recieveByte() == FINISHED_TOTAL_CYCLE)
    126a:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <UART_recieveByte>
    126e:	86 36       	cpi	r24, 0x66	; 102
    1270:	11 f4       	brne	.+4      	; 0x1276 <OpenDoor+0x4e>
	{
		currentState = 0;
    1272:	10 92 02 01 	sts	0x0102, r1
	}

}
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <EnterPass>:

// Function to enter password
void EnterPass()
{
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	ac 97       	sbiw	r28, 0x2c	; 44
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1294:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <LCD_moveCursor>
	LCD_displayString("Enter Pass: ");
    12a0:	84 ed       	ldi	r24, 0xD4	; 212
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <LCD_displayString>
	LCD_moveCursor(1, 0);
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <LCD_moveCursor>
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	aa e7       	ldi	r26, 0x7A	; 122
    12b6:	b5 e4       	ldi	r27, 0x45	; 69
    12b8:	8f a3       	std	Y+39, r24	; 0x27
    12ba:	98 a7       	std	Y+40, r25	; 0x28
    12bc:	a9 a7       	std	Y+41, r26	; 0x29
    12be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c0:	6f a1       	ldd	r22, Y+39	; 0x27
    12c2:	78 a5       	ldd	r23, Y+40	; 0x28
    12c4:	89 a5       	ldd	r24, Y+41	; 0x29
    12c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	4a e7       	ldi	r20, 0x7A	; 122
    12ce:	53 e4       	ldi	r21, 0x43	; 67
    12d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	8b a3       	std	Y+35, r24	; 0x23
    12da:	9c a3       	std	Y+36, r25	; 0x24
    12dc:	ad a3       	std	Y+37, r26	; 0x25
    12de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12e0:	6b a1       	ldd	r22, Y+35	; 0x23
    12e2:	7c a1       	ldd	r23, Y+36	; 0x24
    12e4:	8d a1       	ldd	r24, Y+37	; 0x25
    12e6:	9e a1       	ldd	r25, Y+38	; 0x26
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e8       	ldi	r20, 0x80	; 128
    12ee:	5f e3       	ldi	r21, 0x3F	; 63
    12f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12f4:	88 23       	and	r24, r24
    12f6:	2c f4       	brge	.+10     	; 0x1302 <EnterPass+0x86>
		__ticks = 1;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	9a a3       	std	Y+34, r25	; 0x22
    12fe:	89 a3       	std	Y+33, r24	; 0x21
    1300:	3f c0       	rjmp	.+126    	; 0x1380 <EnterPass+0x104>
	else if (__tmp > 65535)
    1302:	6b a1       	ldd	r22, Y+35	; 0x23
    1304:	7c a1       	ldd	r23, Y+36	; 0x24
    1306:	8d a1       	ldd	r24, Y+37	; 0x25
    1308:	9e a1       	ldd	r25, Y+38	; 0x26
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	3f ef       	ldi	r19, 0xFF	; 255
    130e:	4f e7       	ldi	r20, 0x7F	; 127
    1310:	57 e4       	ldi	r21, 0x47	; 71
    1312:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1316:	18 16       	cp	r1, r24
    1318:	4c f5       	brge	.+82     	; 0x136c <EnterPass+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131a:	6f a1       	ldd	r22, Y+39	; 0x27
    131c:	78 a5       	ldd	r23, Y+40	; 0x28
    131e:	89 a5       	ldd	r24, Y+41	; 0x29
    1320:	9a a5       	ldd	r25, Y+42	; 0x2a
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e2       	ldi	r20, 0x20	; 32
    1328:	51 e4       	ldi	r21, 0x41	; 65
    132a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	bc 01       	movw	r22, r24
    1334:	cd 01       	movw	r24, r26
    1336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	9a a3       	std	Y+34, r25	; 0x22
    1340:	89 a3       	std	Y+33, r24	; 0x21
    1342:	0f c0       	rjmp	.+30     	; 0x1362 <EnterPass+0xe6>
    1344:	89 e1       	ldi	r24, 0x19	; 25
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	98 a3       	std	Y+32, r25	; 0x20
    134a:	8f 8f       	std	Y+31, r24	; 0x1f
    134c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    134e:	98 a1       	ldd	r25, Y+32	; 0x20
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <EnterPass+0xd4>
    1354:	98 a3       	std	Y+32, r25	; 0x20
    1356:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1358:	89 a1       	ldd	r24, Y+33	; 0x21
    135a:	9a a1       	ldd	r25, Y+34	; 0x22
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	9a a3       	std	Y+34, r25	; 0x22
    1360:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1362:	89 a1       	ldd	r24, Y+33	; 0x21
    1364:	9a a1       	ldd	r25, Y+34	; 0x22
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	69 f7       	brne	.-38     	; 0x1344 <EnterPass+0xc8>
    136a:	14 c0       	rjmp	.+40     	; 0x1394 <EnterPass+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    136c:	6b a1       	ldd	r22, Y+35	; 0x23
    136e:	7c a1       	ldd	r23, Y+36	; 0x24
    1370:	8d a1       	ldd	r24, Y+37	; 0x25
    1372:	9e a1       	ldd	r25, Y+38	; 0x26
    1374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	9a a3       	std	Y+34, r25	; 0x22
    137e:	89 a3       	std	Y+33, r24	; 0x21
    1380:	89 a1       	ldd	r24, Y+33	; 0x21
    1382:	9a a1       	ldd	r25, Y+34	; 0x22
    1384:	9e 8f       	std	Y+30, r25	; 0x1e
    1386:	8d 8f       	std	Y+29, r24	; 0x1d
    1388:	8d 8d       	ldd	r24, Y+29	; 0x1d
    138a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	f1 f7       	brne	.-4      	; 0x138c <EnterPass+0x110>
    1390:	9e 8f       	std	Y+30, r25	; 0x1e
    1392:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(4000);

	for (int i = 0; i < PASSWORD_SIZE; i++)
    1394:	1c a6       	std	Y+44, r1	; 0x2c
    1396:	1b a6       	std	Y+43, r1	; 0x2b
    1398:	88 c0       	rjmp	.+272    	; 0x14aa <EnterPass+0x22e>
	{
		password[i] = KEYPAD_getPressedKey(); //Store each entered number from keypad in array
    139a:	0b a5       	ldd	r16, Y+43	; 0x2b
    139c:	1c a5       	ldd	r17, Y+44	; 0x2c
    139e:	0e 94 ac 10 	call	0x2158	; 0x2158 <KEYPAD_getPressedKey>
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	c8 01       	movw	r24, r16
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	fc 01       	movw	r30, r24
    13ae:	e9 5f       	subi	r30, 0xF9	; 249
    13b0:	fe 4f       	sbci	r31, 0xFE	; 254
    13b2:	31 83       	std	Z+1, r19	; 0x01
    13b4:	20 83       	st	Z, r18
		LCD_displayCharacter('*');
    13b6:	8a e2       	ldi	r24, 0x2A	; 42
    13b8:	0e 94 bb 13 	call	0x2776	; 0x2776 <LCD_displayCharacter>
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	aa e7       	ldi	r26, 0x7A	; 122
    13c2:	b5 e4       	ldi	r27, 0x45	; 69
    13c4:	89 8f       	std	Y+25, r24	; 0x19
    13c6:	9a 8f       	std	Y+26, r25	; 0x1a
    13c8:	ab 8f       	std	Y+27, r26	; 0x1b
    13ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13cc:	69 8d       	ldd	r22, Y+25	; 0x19
    13ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	4a e7       	ldi	r20, 0x7A	; 122
    13da:	53 e4       	ldi	r21, 0x43	; 67
    13dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	8d 8b       	std	Y+21, r24	; 0x15
    13e6:	9e 8b       	std	Y+22, r25	; 0x16
    13e8:	af 8b       	std	Y+23, r26	; 0x17
    13ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13ec:	6d 89       	ldd	r22, Y+21	; 0x15
    13ee:	7e 89       	ldd	r23, Y+22	; 0x16
    13f0:	8f 89       	ldd	r24, Y+23	; 0x17
    13f2:	98 8d       	ldd	r25, Y+24	; 0x18
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	40 e8       	ldi	r20, 0x80	; 128
    13fa:	5f e3       	ldi	r21, 0x3F	; 63
    13fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1400:	88 23       	and	r24, r24
    1402:	2c f4       	brge	.+10     	; 0x140e <EnterPass+0x192>
		__ticks = 1;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	9c 8b       	std	Y+20, r25	; 0x14
    140a:	8b 8b       	std	Y+19, r24	; 0x13
    140c:	3f c0       	rjmp	.+126    	; 0x148c <EnterPass+0x210>
	else if (__tmp > 65535)
    140e:	6d 89       	ldd	r22, Y+21	; 0x15
    1410:	7e 89       	ldd	r23, Y+22	; 0x16
    1412:	8f 89       	ldd	r24, Y+23	; 0x17
    1414:	98 8d       	ldd	r25, Y+24	; 0x18
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	3f ef       	ldi	r19, 0xFF	; 255
    141a:	4f e7       	ldi	r20, 0x7F	; 127
    141c:	57 e4       	ldi	r21, 0x47	; 71
    141e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1422:	18 16       	cp	r1, r24
    1424:	4c f5       	brge	.+82     	; 0x1478 <EnterPass+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1426:	69 8d       	ldd	r22, Y+25	; 0x19
    1428:	7a 8d       	ldd	r23, Y+26	; 0x1a
    142a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    142c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e2       	ldi	r20, 0x20	; 32
    1434:	51 e4       	ldi	r21, 0x41	; 65
    1436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	bc 01       	movw	r22, r24
    1440:	cd 01       	movw	r24, r26
    1442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	9c 8b       	std	Y+20, r25	; 0x14
    144c:	8b 8b       	std	Y+19, r24	; 0x13
    144e:	0f c0       	rjmp	.+30     	; 0x146e <EnterPass+0x1f2>
    1450:	89 e1       	ldi	r24, 0x19	; 25
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	9a 8b       	std	Y+18, r25	; 0x12
    1456:	89 8b       	std	Y+17, r24	; 0x11
    1458:	89 89       	ldd	r24, Y+17	; 0x11
    145a:	9a 89       	ldd	r25, Y+18	; 0x12
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <EnterPass+0x1e0>
    1460:	9a 8b       	std	Y+18, r25	; 0x12
    1462:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1464:	8b 89       	ldd	r24, Y+19	; 0x13
    1466:	9c 89       	ldd	r25, Y+20	; 0x14
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	9c 8b       	std	Y+20, r25	; 0x14
    146c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146e:	8b 89       	ldd	r24, Y+19	; 0x13
    1470:	9c 89       	ldd	r25, Y+20	; 0x14
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	69 f7       	brne	.-38     	; 0x1450 <EnterPass+0x1d4>
    1476:	14 c0       	rjmp	.+40     	; 0x14a0 <EnterPass+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1478:	6d 89       	ldd	r22, Y+21	; 0x15
    147a:	7e 89       	ldd	r23, Y+22	; 0x16
    147c:	8f 89       	ldd	r24, Y+23	; 0x17
    147e:	98 8d       	ldd	r25, Y+24	; 0x18
    1480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	9c 8b       	std	Y+20, r25	; 0x14
    148a:	8b 8b       	std	Y+19, r24	; 0x13
    148c:	8b 89       	ldd	r24, Y+19	; 0x13
    148e:	9c 89       	ldd	r25, Y+20	; 0x14
    1490:	98 8b       	std	Y+16, r25	; 0x10
    1492:	8f 87       	std	Y+15, r24	; 0x0f
    1494:	8f 85       	ldd	r24, Y+15	; 0x0f
    1496:	98 89       	ldd	r25, Y+16	; 0x10
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	f1 f7       	brne	.-4      	; 0x1498 <EnterPass+0x21c>
    149c:	98 8b       	std	Y+16, r25	; 0x10
    149e:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_moveCursor(0, 0);
	LCD_displayString("Enter Pass: ");
	LCD_moveCursor(1, 0);
	_delay_ms(4000);

	for (int i = 0; i < PASSWORD_SIZE; i++)
    14a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    14a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    14a4:	01 96       	adiw	r24, 0x01	; 1
    14a6:	9c a7       	std	Y+44, r25	; 0x2c
    14a8:	8b a7       	std	Y+43, r24	; 0x2b
    14aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    14ae:	85 30       	cpi	r24, 0x05	; 5
    14b0:	91 05       	cpc	r25, r1
    14b2:	0c f4       	brge	.+2      	; 0x14b6 <EnterPass+0x23a>
    14b4:	72 cf       	rjmp	.-284    	; 0x139a <EnterPass+0x11e>
		password[i] = KEYPAD_getPressedKey(); //Store each entered number from keypad in array
		LCD_displayCharacter('*');
		_delay_ms(4000);
	}

	while (KEYPAD_getPressedKey() != '=');
    14b6:	0e 94 ac 10 	call	0x2158	; 0x2158 <KEYPAD_getPressedKey>
    14ba:	8d 33       	cpi	r24, 0x3D	; 61
    14bc:	e1 f7       	brne	.-8      	; 0x14b6 <EnterPass+0x23a>
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	aa ef       	ldi	r26, 0xFA	; 250
    14c4:	b4 e4       	ldi	r27, 0x44	; 68
    14c6:	8b 87       	std	Y+11, r24	; 0x0b
    14c8:	9c 87       	std	Y+12, r25	; 0x0c
    14ca:	ad 87       	std	Y+13, r26	; 0x0d
    14cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	4a e7       	ldi	r20, 0x7A	; 122
    14dc:	53 e4       	ldi	r21, 0x43	; 67
    14de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	8f 83       	std	Y+7, r24	; 0x07
    14e8:	98 87       	std	Y+8, r25	; 0x08
    14ea:	a9 87       	std	Y+9, r26	; 0x09
    14ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ee:	6f 81       	ldd	r22, Y+7	; 0x07
    14f0:	78 85       	ldd	r23, Y+8	; 0x08
    14f2:	89 85       	ldd	r24, Y+9	; 0x09
    14f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	40 e8       	ldi	r20, 0x80	; 128
    14fc:	5f e3       	ldi	r21, 0x3F	; 63
    14fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1502:	88 23       	and	r24, r24
    1504:	2c f4       	brge	.+10     	; 0x1510 <EnterPass+0x294>
		__ticks = 1;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	9e 83       	std	Y+6, r25	; 0x06
    150c:	8d 83       	std	Y+5, r24	; 0x05
    150e:	3f c0       	rjmp	.+126    	; 0x158e <EnterPass+0x312>
	else if (__tmp > 65535)
    1510:	6f 81       	ldd	r22, Y+7	; 0x07
    1512:	78 85       	ldd	r23, Y+8	; 0x08
    1514:	89 85       	ldd	r24, Y+9	; 0x09
    1516:	9a 85       	ldd	r25, Y+10	; 0x0a
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	3f ef       	ldi	r19, 0xFF	; 255
    151c:	4f e7       	ldi	r20, 0x7F	; 127
    151e:	57 e4       	ldi	r21, 0x47	; 71
    1520:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1524:	18 16       	cp	r1, r24
    1526:	4c f5       	brge	.+82     	; 0x157a <EnterPass+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1528:	6b 85       	ldd	r22, Y+11	; 0x0b
    152a:	7c 85       	ldd	r23, Y+12	; 0x0c
    152c:	8d 85       	ldd	r24, Y+13	; 0x0d
    152e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e2       	ldi	r20, 0x20	; 32
    1536:	51 e4       	ldi	r21, 0x41	; 65
    1538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	bc 01       	movw	r22, r24
    1542:	cd 01       	movw	r24, r26
    1544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	9e 83       	std	Y+6, r25	; 0x06
    154e:	8d 83       	std	Y+5, r24	; 0x05
    1550:	0f c0       	rjmp	.+30     	; 0x1570 <EnterPass+0x2f4>
    1552:	89 e1       	ldi	r24, 0x19	; 25
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	9c 83       	std	Y+4, r25	; 0x04
    1558:	8b 83       	std	Y+3, r24	; 0x03
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	9c 81       	ldd	r25, Y+4	; 0x04
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	f1 f7       	brne	.-4      	; 0x155e <EnterPass+0x2e2>
    1562:	9c 83       	std	Y+4, r25	; 0x04
    1564:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	9e 83       	std	Y+6, r25	; 0x06
    156e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1570:	8d 81       	ldd	r24, Y+5	; 0x05
    1572:	9e 81       	ldd	r25, Y+6	; 0x06
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	69 f7       	brne	.-38     	; 0x1552 <EnterPass+0x2d6>
    1578:	14 c0       	rjmp	.+40     	; 0x15a2 <EnterPass+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    157a:	6f 81       	ldd	r22, Y+7	; 0x07
    157c:	78 85       	ldd	r23, Y+8	; 0x08
    157e:	89 85       	ldd	r24, Y+9	; 0x09
    1580:	9a 85       	ldd	r25, Y+10	; 0x0a
    1582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	9e 83       	std	Y+6, r25	; 0x06
    158c:	8d 83       	std	Y+5, r24	; 0x05
    158e:	8d 81       	ldd	r24, Y+5	; 0x05
    1590:	9e 81       	ldd	r25, Y+6	; 0x06
    1592:	9a 83       	std	Y+2, r25	; 0x02
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	9a 81       	ldd	r25, Y+2	; 0x02
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	f1 f7       	brne	.-4      	; 0x159a <EnterPass+0x31e>
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);

}
    15a2:	ac 96       	adiw	r28, 0x2c	; 44
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	cd bf       	out	0x3d, r28	; 61
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	1f 91       	pop	r17
    15b4:	0f 91       	pop	r16
    15b6:	08 95       	ret

000015b8 <EnterOldPass>:

// Function to enter old password
void EnterOldPass()
{
    15b8:	0f 93       	push	r16
    15ba:	1f 93       	push	r17
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	ac 97       	sbiw	r28, 0x2c	; 44
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    15d0:	0e 94 56 16 	call	0x2cac	; 0x2cac <LCD_clearScreen>
	LCD_displayString("Enter old Pass: ");
    15d4:	81 ee       	ldi	r24, 0xE1	; 225
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <LCD_displayString>
	LCD_moveCursor(1, 0);
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <LCD_moveCursor>
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	aa e7       	ldi	r26, 0x7A	; 122
    15ea:	b5 e4       	ldi	r27, 0x45	; 69
    15ec:	8f a3       	std	Y+39, r24	; 0x27
    15ee:	98 a7       	std	Y+40, r25	; 0x28
    15f0:	a9 a7       	std	Y+41, r26	; 0x29
    15f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f4:	6f a1       	ldd	r22, Y+39	; 0x27
    15f6:	78 a5       	ldd	r23, Y+40	; 0x28
    15f8:	89 a5       	ldd	r24, Y+41	; 0x29
    15fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	4a e7       	ldi	r20, 0x7A	; 122
    1602:	53 e4       	ldi	r21, 0x43	; 67
    1604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	8b a3       	std	Y+35, r24	; 0x23
    160e:	9c a3       	std	Y+36, r25	; 0x24
    1610:	ad a3       	std	Y+37, r26	; 0x25
    1612:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1614:	6b a1       	ldd	r22, Y+35	; 0x23
    1616:	7c a1       	ldd	r23, Y+36	; 0x24
    1618:	8d a1       	ldd	r24, Y+37	; 0x25
    161a:	9e a1       	ldd	r25, Y+38	; 0x26
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	40 e8       	ldi	r20, 0x80	; 128
    1622:	5f e3       	ldi	r21, 0x3F	; 63
    1624:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1628:	88 23       	and	r24, r24
    162a:	2c f4       	brge	.+10     	; 0x1636 <EnterOldPass+0x7e>
		__ticks = 1;
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	9a a3       	std	Y+34, r25	; 0x22
    1632:	89 a3       	std	Y+33, r24	; 0x21
    1634:	3f c0       	rjmp	.+126    	; 0x16b4 <EnterOldPass+0xfc>
	else if (__tmp > 65535)
    1636:	6b a1       	ldd	r22, Y+35	; 0x23
    1638:	7c a1       	ldd	r23, Y+36	; 0x24
    163a:	8d a1       	ldd	r24, Y+37	; 0x25
    163c:	9e a1       	ldd	r25, Y+38	; 0x26
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	3f ef       	ldi	r19, 0xFF	; 255
    1642:	4f e7       	ldi	r20, 0x7F	; 127
    1644:	57 e4       	ldi	r21, 0x47	; 71
    1646:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    164a:	18 16       	cp	r1, r24
    164c:	4c f5       	brge	.+82     	; 0x16a0 <EnterOldPass+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    164e:	6f a1       	ldd	r22, Y+39	; 0x27
    1650:	78 a5       	ldd	r23, Y+40	; 0x28
    1652:	89 a5       	ldd	r24, Y+41	; 0x29
    1654:	9a a5       	ldd	r25, Y+42	; 0x2a
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	40 e2       	ldi	r20, 0x20	; 32
    165c:	51 e4       	ldi	r21, 0x41	; 65
    165e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	bc 01       	movw	r22, r24
    1668:	cd 01       	movw	r24, r26
    166a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	9a a3       	std	Y+34, r25	; 0x22
    1674:	89 a3       	std	Y+33, r24	; 0x21
    1676:	0f c0       	rjmp	.+30     	; 0x1696 <EnterOldPass+0xde>
    1678:	89 e1       	ldi	r24, 0x19	; 25
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	98 a3       	std	Y+32, r25	; 0x20
    167e:	8f 8f       	std	Y+31, r24	; 0x1f
    1680:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1682:	98 a1       	ldd	r25, Y+32	; 0x20
    1684:	01 97       	sbiw	r24, 0x01	; 1
    1686:	f1 f7       	brne	.-4      	; 0x1684 <EnterOldPass+0xcc>
    1688:	98 a3       	std	Y+32, r25	; 0x20
    168a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168c:	89 a1       	ldd	r24, Y+33	; 0x21
    168e:	9a a1       	ldd	r25, Y+34	; 0x22
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	9a a3       	std	Y+34, r25	; 0x22
    1694:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1696:	89 a1       	ldd	r24, Y+33	; 0x21
    1698:	9a a1       	ldd	r25, Y+34	; 0x22
    169a:	00 97       	sbiw	r24, 0x00	; 0
    169c:	69 f7       	brne	.-38     	; 0x1678 <EnterOldPass+0xc0>
    169e:	14 c0       	rjmp	.+40     	; 0x16c8 <EnterOldPass+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a0:	6b a1       	ldd	r22, Y+35	; 0x23
    16a2:	7c a1       	ldd	r23, Y+36	; 0x24
    16a4:	8d a1       	ldd	r24, Y+37	; 0x25
    16a6:	9e a1       	ldd	r25, Y+38	; 0x26
    16a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	9a a3       	std	Y+34, r25	; 0x22
    16b2:	89 a3       	std	Y+33, r24	; 0x21
    16b4:	89 a1       	ldd	r24, Y+33	; 0x21
    16b6:	9a a1       	ldd	r25, Y+34	; 0x22
    16b8:	9e 8f       	std	Y+30, r25	; 0x1e
    16ba:	8d 8f       	std	Y+29, r24	; 0x1d
    16bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <EnterOldPass+0x108>
    16c4:	9e 8f       	std	Y+30, r25	; 0x1e
    16c6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(4000);

	for (int i = 0; i < PASSWORD_SIZE; i++)
    16c8:	1c a6       	std	Y+44, r1	; 0x2c
    16ca:	1b a6       	std	Y+43, r1	; 0x2b
    16cc:	88 c0       	rjmp	.+272    	; 0x17de <EnterOldPass+0x226>
	{
		password[i] = KEYPAD_getPressedKey(); //Store each entered number from keypad in array
    16ce:	0b a5       	ldd	r16, Y+43	; 0x2b
    16d0:	1c a5       	ldd	r17, Y+44	; 0x2c
    16d2:	0e 94 ac 10 	call	0x2158	; 0x2158 <KEYPAD_getPressedKey>
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	c8 01       	movw	r24, r16
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	fc 01       	movw	r30, r24
    16e2:	e9 5f       	subi	r30, 0xF9	; 249
    16e4:	fe 4f       	sbci	r31, 0xFE	; 254
    16e6:	31 83       	std	Z+1, r19	; 0x01
    16e8:	20 83       	st	Z, r18
		LCD_displayCharacter('*');
    16ea:	8a e2       	ldi	r24, 0x2A	; 42
    16ec:	0e 94 bb 13 	call	0x2776	; 0x2776 <LCD_displayCharacter>
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	aa e7       	ldi	r26, 0x7A	; 122
    16f6:	b5 e4       	ldi	r27, 0x45	; 69
    16f8:	89 8f       	std	Y+25, r24	; 0x19
    16fa:	9a 8f       	std	Y+26, r25	; 0x1a
    16fc:	ab 8f       	std	Y+27, r26	; 0x1b
    16fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1700:	69 8d       	ldd	r22, Y+25	; 0x19
    1702:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1704:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1706:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	4a e7       	ldi	r20, 0x7A	; 122
    170e:	53 e4       	ldi	r21, 0x43	; 67
    1710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	8d 8b       	std	Y+21, r24	; 0x15
    171a:	9e 8b       	std	Y+22, r25	; 0x16
    171c:	af 8b       	std	Y+23, r26	; 0x17
    171e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1720:	6d 89       	ldd	r22, Y+21	; 0x15
    1722:	7e 89       	ldd	r23, Y+22	; 0x16
    1724:	8f 89       	ldd	r24, Y+23	; 0x17
    1726:	98 8d       	ldd	r25, Y+24	; 0x18
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e8       	ldi	r20, 0x80	; 128
    172e:	5f e3       	ldi	r21, 0x3F	; 63
    1730:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1734:	88 23       	and	r24, r24
    1736:	2c f4       	brge	.+10     	; 0x1742 <EnterOldPass+0x18a>
		__ticks = 1;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	9c 8b       	std	Y+20, r25	; 0x14
    173e:	8b 8b       	std	Y+19, r24	; 0x13
    1740:	3f c0       	rjmp	.+126    	; 0x17c0 <EnterOldPass+0x208>
	else if (__tmp > 65535)
    1742:	6d 89       	ldd	r22, Y+21	; 0x15
    1744:	7e 89       	ldd	r23, Y+22	; 0x16
    1746:	8f 89       	ldd	r24, Y+23	; 0x17
    1748:	98 8d       	ldd	r25, Y+24	; 0x18
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	3f ef       	ldi	r19, 0xFF	; 255
    174e:	4f e7       	ldi	r20, 0x7F	; 127
    1750:	57 e4       	ldi	r21, 0x47	; 71
    1752:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1756:	18 16       	cp	r1, r24
    1758:	4c f5       	brge	.+82     	; 0x17ac <EnterOldPass+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175a:	69 8d       	ldd	r22, Y+25	; 0x19
    175c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    175e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1760:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e2       	ldi	r20, 0x20	; 32
    1768:	51 e4       	ldi	r21, 0x41	; 65
    176a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	bc 01       	movw	r22, r24
    1774:	cd 01       	movw	r24, r26
    1776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	9c 8b       	std	Y+20, r25	; 0x14
    1780:	8b 8b       	std	Y+19, r24	; 0x13
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <EnterOldPass+0x1ea>
    1784:	89 e1       	ldi	r24, 0x19	; 25
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9a 8b       	std	Y+18, r25	; 0x12
    178a:	89 8b       	std	Y+17, r24	; 0x11
    178c:	89 89       	ldd	r24, Y+17	; 0x11
    178e:	9a 89       	ldd	r25, Y+18	; 0x12
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <EnterOldPass+0x1d8>
    1794:	9a 8b       	std	Y+18, r25	; 0x12
    1796:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1798:	8b 89       	ldd	r24, Y+19	; 0x13
    179a:	9c 89       	ldd	r25, Y+20	; 0x14
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	9c 8b       	std	Y+20, r25	; 0x14
    17a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a2:	8b 89       	ldd	r24, Y+19	; 0x13
    17a4:	9c 89       	ldd	r25, Y+20	; 0x14
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	69 f7       	brne	.-38     	; 0x1784 <EnterOldPass+0x1cc>
    17aa:	14 c0       	rjmp	.+40     	; 0x17d4 <EnterOldPass+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ac:	6d 89       	ldd	r22, Y+21	; 0x15
    17ae:	7e 89       	ldd	r23, Y+22	; 0x16
    17b0:	8f 89       	ldd	r24, Y+23	; 0x17
    17b2:	98 8d       	ldd	r25, Y+24	; 0x18
    17b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	9c 8b       	std	Y+20, r25	; 0x14
    17be:	8b 8b       	std	Y+19, r24	; 0x13
    17c0:	8b 89       	ldd	r24, Y+19	; 0x13
    17c2:	9c 89       	ldd	r25, Y+20	; 0x14
    17c4:	98 8b       	std	Y+16, r25	; 0x10
    17c6:	8f 87       	std	Y+15, r24	; 0x0f
    17c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ca:	98 89       	ldd	r25, Y+16	; 0x10
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <EnterOldPass+0x214>
    17d0:	98 8b       	std	Y+16, r25	; 0x10
    17d2:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();
	LCD_displayString("Enter old Pass: ");
	LCD_moveCursor(1, 0);
	_delay_ms(4000);

	for (int i = 0; i < PASSWORD_SIZE; i++)
    17d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    17d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    17d8:	01 96       	adiw	r24, 0x01	; 1
    17da:	9c a7       	std	Y+44, r25	; 0x2c
    17dc:	8b a7       	std	Y+43, r24	; 0x2b
    17de:	8b a5       	ldd	r24, Y+43	; 0x2b
    17e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    17e2:	85 30       	cpi	r24, 0x05	; 5
    17e4:	91 05       	cpc	r25, r1
    17e6:	0c f4       	brge	.+2      	; 0x17ea <EnterOldPass+0x232>
    17e8:	72 cf       	rjmp	.-284    	; 0x16ce <EnterOldPass+0x116>
		password[i] = KEYPAD_getPressedKey(); //Store each entered number from keypad in array
		LCD_displayCharacter('*');
		_delay_ms(4000);
	}

	while (KEYPAD_getPressedKey() != '=');
    17ea:	0e 94 ac 10 	call	0x2158	; 0x2158 <KEYPAD_getPressedKey>
    17ee:	8d 33       	cpi	r24, 0x3D	; 61
    17f0:	e1 f7       	brne	.-8      	; 0x17ea <EnterOldPass+0x232>
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	aa e7       	ldi	r26, 0x7A	; 122
    17f8:	b5 e4       	ldi	r27, 0x45	; 69
    17fa:	8b 87       	std	Y+11, r24	; 0x0b
    17fc:	9c 87       	std	Y+12, r25	; 0x0c
    17fe:	ad 87       	std	Y+13, r26	; 0x0d
    1800:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1802:	6b 85       	ldd	r22, Y+11	; 0x0b
    1804:	7c 85       	ldd	r23, Y+12	; 0x0c
    1806:	8d 85       	ldd	r24, Y+13	; 0x0d
    1808:	9e 85       	ldd	r25, Y+14	; 0x0e
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	4a e7       	ldi	r20, 0x7A	; 122
    1810:	53 e4       	ldi	r21, 0x43	; 67
    1812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	8f 83       	std	Y+7, r24	; 0x07
    181c:	98 87       	std	Y+8, r25	; 0x08
    181e:	a9 87       	std	Y+9, r26	; 0x09
    1820:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1822:	6f 81       	ldd	r22, Y+7	; 0x07
    1824:	78 85       	ldd	r23, Y+8	; 0x08
    1826:	89 85       	ldd	r24, Y+9	; 0x09
    1828:	9a 85       	ldd	r25, Y+10	; 0x0a
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e8       	ldi	r20, 0x80	; 128
    1830:	5f e3       	ldi	r21, 0x3F	; 63
    1832:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1836:	88 23       	and	r24, r24
    1838:	2c f4       	brge	.+10     	; 0x1844 <EnterOldPass+0x28c>
		__ticks = 1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9e 83       	std	Y+6, r25	; 0x06
    1840:	8d 83       	std	Y+5, r24	; 0x05
    1842:	3f c0       	rjmp	.+126    	; 0x18c2 <EnterOldPass+0x30a>
	else if (__tmp > 65535)
    1844:	6f 81       	ldd	r22, Y+7	; 0x07
    1846:	78 85       	ldd	r23, Y+8	; 0x08
    1848:	89 85       	ldd	r24, Y+9	; 0x09
    184a:	9a 85       	ldd	r25, Y+10	; 0x0a
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	3f ef       	ldi	r19, 0xFF	; 255
    1850:	4f e7       	ldi	r20, 0x7F	; 127
    1852:	57 e4       	ldi	r21, 0x47	; 71
    1854:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1858:	18 16       	cp	r1, r24
    185a:	4c f5       	brge	.+82     	; 0x18ae <EnterOldPass+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185c:	6b 85       	ldd	r22, Y+11	; 0x0b
    185e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1860:	8d 85       	ldd	r24, Y+13	; 0x0d
    1862:	9e 85       	ldd	r25, Y+14	; 0x0e
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e2       	ldi	r20, 0x20	; 32
    186a:	51 e4       	ldi	r21, 0x41	; 65
    186c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	bc 01       	movw	r22, r24
    1876:	cd 01       	movw	r24, r26
    1878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	9e 83       	std	Y+6, r25	; 0x06
    1882:	8d 83       	std	Y+5, r24	; 0x05
    1884:	0f c0       	rjmp	.+30     	; 0x18a4 <EnterOldPass+0x2ec>
    1886:	89 e1       	ldi	r24, 0x19	; 25
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	9c 83       	std	Y+4, r25	; 0x04
    188c:	8b 83       	std	Y+3, r24	; 0x03
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <EnterOldPass+0x2da>
    1896:	9c 83       	std	Y+4, r25	; 0x04
    1898:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189a:	8d 81       	ldd	r24, Y+5	; 0x05
    189c:	9e 81       	ldd	r25, Y+6	; 0x06
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	9e 83       	std	Y+6, r25	; 0x06
    18a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a4:	8d 81       	ldd	r24, Y+5	; 0x05
    18a6:	9e 81       	ldd	r25, Y+6	; 0x06
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	69 f7       	brne	.-38     	; 0x1886 <EnterOldPass+0x2ce>
    18ac:	14 c0       	rjmp	.+40     	; 0x18d6 <EnterOldPass+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ae:	6f 81       	ldd	r22, Y+7	; 0x07
    18b0:	78 85       	ldd	r23, Y+8	; 0x08
    18b2:	89 85       	ldd	r24, Y+9	; 0x09
    18b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	9e 83       	std	Y+6, r25	; 0x06
    18c0:	8d 83       	std	Y+5, r24	; 0x05
    18c2:	8d 81       	ldd	r24, Y+5	; 0x05
    18c4:	9e 81       	ldd	r25, Y+6	; 0x06
    18c6:	9a 83       	std	Y+2, r25	; 0x02
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	9a 81       	ldd	r25, Y+2	; 0x02
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <EnterOldPass+0x316>
    18d2:	9a 83       	std	Y+2, r25	; 0x02
    18d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4000);

}
    18d6:	ac 96       	adiw	r28, 0x2c	; 44
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	de bf       	out	0x3e, r29	; 62
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	cd bf       	out	0x3d, r28	; 61
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	08 95       	ret

000018ec <__vector_9>:
 *******************************************************************************/

/* Interrupt Service Routine for timer0 overflow mode */

ISR(TIMER0_OVF_vect)
{
    18ec:	1f 92       	push	r1
    18ee:	0f 92       	push	r0
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	0f 92       	push	r0
    18f4:	11 24       	eor	r1, r1
    18f6:	2f 93       	push	r18
    18f8:	3f 93       	push	r19
    18fa:	4f 93       	push	r20
    18fc:	5f 93       	push	r21
    18fe:	6f 93       	push	r22
    1900:	7f 93       	push	r23
    1902:	8f 93       	push	r24
    1904:	9f 93       	push	r25
    1906:	af 93       	push	r26
    1908:	bf 93       	push	r27
    190a:	ef 93       	push	r30
    190c:	ff 93       	push	r31
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1916:	80 91 05 01 	lds	r24, 0x0105
    191a:	90 91 06 01 	lds	r25, 0x0106
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	29 f0       	breq	.+10     	; 0x192c <__vector_9+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1922:	e0 91 05 01 	lds	r30, 0x0105
    1926:	f0 91 06 01 	lds	r31, 0x0106
    192a:	09 95       	icall
		}
}
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	ff 91       	pop	r31
    1932:	ef 91       	pop	r30
    1934:	bf 91       	pop	r27
    1936:	af 91       	pop	r26
    1938:	9f 91       	pop	r25
    193a:	8f 91       	pop	r24
    193c:	7f 91       	pop	r23
    193e:	6f 91       	pop	r22
    1940:	5f 91       	pop	r21
    1942:	4f 91       	pop	r20
    1944:	3f 91       	pop	r19
    1946:	2f 91       	pop	r18
    1948:	0f 90       	pop	r0
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	0f 90       	pop	r0
    194e:	1f 90       	pop	r1
    1950:	18 95       	reti

00001952 <__vector_19>:

/* Interrupt Service Routine for timer0 compare mode */

ISR(TIMER0_COMP_vect)
{
    1952:	1f 92       	push	r1
    1954:	0f 92       	push	r0
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	0f 92       	push	r0
    195a:	11 24       	eor	r1, r1
    195c:	2f 93       	push	r18
    195e:	3f 93       	push	r19
    1960:	4f 93       	push	r20
    1962:	5f 93       	push	r21
    1964:	6f 93       	push	r22
    1966:	7f 93       	push	r23
    1968:	8f 93       	push	r24
    196a:	9f 93       	push	r25
    196c:	af 93       	push	r26
    196e:	bf 93       	push	r27
    1970:	ef 93       	push	r30
    1972:	ff 93       	push	r31
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    197c:	80 91 05 01 	lds	r24, 0x0105
    1980:	90 91 06 01 	lds	r25, 0x0106
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	29 f0       	breq	.+10     	; 0x1992 <__vector_19+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1988:	e0 91 05 01 	lds	r30, 0x0105
    198c:	f0 91 06 01 	lds	r31, 0x0106
    1990:	09 95       	icall
		}

}
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	ff 91       	pop	r31
    1998:	ef 91       	pop	r30
    199a:	bf 91       	pop	r27
    199c:	af 91       	pop	r26
    199e:	9f 91       	pop	r25
    19a0:	8f 91       	pop	r24
    19a2:	7f 91       	pop	r23
    19a4:	6f 91       	pop	r22
    19a6:	5f 91       	pop	r21
    19a8:	4f 91       	pop	r20
    19aa:	3f 91       	pop	r19
    19ac:	2f 91       	pop	r18
    19ae:	0f 90       	pop	r0
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	0f 90       	pop	r0
    19b4:	1f 90       	pop	r1
    19b6:	18 95       	reti

000019b8 <Timer0_init>:
 * 	3. Set the compare value.
 * 	4. Set the prescaler.
 */

void Timer0_init(Timer0_ConfigType* Config_Ptr)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <Timer0_init+0x6>
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	9a 83       	std	Y+2, r25	; 0x02
    19c4:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->mode == normal)
    19c6:	e9 81       	ldd	r30, Y+1	; 0x01
    19c8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ca:	80 81       	ld	r24, Z
    19cc:	88 23       	and	r24, r24
    19ce:	41 f5       	brne	.+80     	; 0x1a20 <Timer0_init+0x68>
	{
	    TCNT0 = Config_Ptr->initial_value;           // Set Timer initial value
    19d0:	a2 e5       	ldi	r26, 0x52	; 82
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e9 81       	ldd	r30, Y+1	; 0x01
    19d6:	fa 81       	ldd	r31, Y+2	; 0x02
    19d8:	81 81       	ldd	r24, Z+1	; 0x01
    19da:	8c 93       	st	X, r24
	    TIMSK |= (1<<TOIE0);                         // Enable Timer0 Overflow Interrupt
    19dc:	a9 e5       	ldi	r26, 0x59	; 89
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e9 e5       	ldi	r30, 0x59	; 89
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	81 60       	ori	r24, 0x01	; 1
    19e8:	8c 93       	st	X, r24
		/* Configure the timer control register */
		TCCR0 |= (1<<FOC0) ;
    19ea:	a3 e5       	ldi	r26, 0x53	; 83
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e3 e5       	ldi	r30, 0x53	; 83
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	80 68       	ori	r24, 0x80	; 128
    19f6:	8c 93       	st	X, r24
		TCCR0 &=  ~(1<<WGM01) &~ (1<<WGM00) ;
    19f8:	a3 e5       	ldi	r26, 0x53	; 83
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e3 e5       	ldi	r30, 0x53	; 83
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	87 7b       	andi	r24, 0xB7	; 183
    1a04:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->prescaler) ;
    1a06:	a3 e5       	ldi	r26, 0x53	; 83
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e3 e5       	ldi	r30, 0x53	; 83
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	98 2f       	mov	r25, r24
    1a12:	98 7f       	andi	r25, 0xF8	; 248
    1a14:	e9 81       	ldd	r30, Y+1	; 0x01
    1a16:	fa 81       	ldd	r31, Y+2	; 0x02
    1a18:	83 81       	ldd	r24, Z+3	; 0x03
    1a1a:	89 2b       	or	r24, r25
    1a1c:	8c 93       	st	X, r24
    1a1e:	39 c0       	rjmp	.+114    	; 0x1a92 <Timer0_init+0xda>
	}

	else if(Config_Ptr->mode == CTC)
    1a20:	e9 81       	ldd	r30, Y+1	; 0x01
    1a22:	fa 81       	ldd	r31, Y+2	; 0x02
    1a24:	80 81       	ld	r24, Z
    1a26:	82 30       	cpi	r24, 0x02	; 2
    1a28:	a1 f5       	brne	.+104    	; 0x1a92 <Timer0_init+0xda>
	{
		TCNT0 = Config_Ptr->initial_value;           // Set Timer initial value
    1a2a:	a2 e5       	ldi	r26, 0x52	; 82
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a30:	fa 81       	ldd	r31, Y+2	; 0x02
    1a32:	81 81       	ldd	r24, Z+1	; 0x01
    1a34:	8c 93       	st	X, r24
		OCR0 = Config_Ptr->compare_value;           // Set Compare Value
    1a36:	ac e5       	ldi	r26, 0x5C	; 92
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a3e:	82 81       	ldd	r24, Z+2	; 0x02
    1a40:	8c 93       	st	X, r24
		TIMSK |= (1 << OCIE0);                // Enable Timer0 Compare Interrupt
    1a42:	a9 e5       	ldi	r26, 0x59	; 89
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e9 e5       	ldi	r30, 0x59	; 89
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	82 60       	ori	r24, 0x02	; 2
    1a4e:	8c 93       	st	X, r24
		/* Configure the timer control register */
		TCCR0 |= (1 << FOC0);
    1a50:	a3 e5       	ldi	r26, 0x53	; 83
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e3 e5       	ldi	r30, 0x53	; 83
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	80 68       	ori	r24, 0x80	; 128
    1a5c:	8c 93       	st	X, r24
		TCCR0 &= ~(1 << WGM00);
    1a5e:	a3 e5       	ldi	r26, 0x53	; 83
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e3 e5       	ldi	r30, 0x53	; 83
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	8f 7b       	andi	r24, 0xBF	; 191
    1a6a:	8c 93       	st	X, r24
		TCCR0 |=  (1 << WGM01);
    1a6c:	a3 e5       	ldi	r26, 0x53	; 83
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e3 e5       	ldi	r30, 0x53	; 83
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	88 60       	ori	r24, 0x08	; 8
    1a78:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->prescaler);
    1a7a:	a3 e5       	ldi	r26, 0x53	; 83
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e3 e5       	ldi	r30, 0x53	; 83
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	98 2f       	mov	r25, r24
    1a86:	98 7f       	andi	r25, 0xF8	; 248
    1a88:	e9 81       	ldd	r30, Y+1	; 0x01
    1a8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8c:	83 81       	ldd	r24, Z+3	; 0x03
    1a8e:	89 2b       	or	r24, r25
    1a90:	8c 93       	st	X, r24
	}

}
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <Timer0_setcallBack>:
/*
 * Description: Function to set the Call Back function address.
 */

void Timer0_setcallBack(void(*b_ptr)(void))
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <Timer0_setcallBack+0x6>
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
		g_callBackPtr = b_ptr;
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	90 93 06 01 	sts	0x0106, r25
    1ab2:	80 93 05 01 	sts	0x0105, r24

}
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <Timer0_deinit>:
/*
 * Description: Function to disable the Timer0 to stop the Timer Driver
 */

void Timer0_deinit(void)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
	/* No clock source */
	TCCR0 &= ~(1 <<CS02) &~(1 <<CS01) &~(1 <<CS00);
    1ac8:	a3 e5       	ldi	r26, 0x53	; 83
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e3 e5       	ldi	r30, 0x53	; 83
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	88 7f       	andi	r24, 0xF8	; 248
    1ad4:	8c 93       	st	X, r24

}
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <GPIO_setupPinDirection+0x6>
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <GPIO_setupPinDirection+0x8>
    1ae4:	0f 92       	push	r0
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	6a 83       	std	Y+2, r22	; 0x02
    1aee:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	88 30       	cpi	r24, 0x08	; 8
    1af4:	08 f0       	brcs	.+2      	; 0x1af8 <GPIO_setupPinDirection+0x1c>
    1af6:	d5 c0       	rjmp	.+426    	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	84 30       	cpi	r24, 0x04	; 4
    1afc:	08 f0       	brcs	.+2      	; 0x1b00 <GPIO_setupPinDirection+0x24>
    1afe:	d1 c0       	rjmp	.+418    	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	3d 83       	std	Y+5, r19	; 0x05
    1b08:	2c 83       	std	Y+4, r18	; 0x04
    1b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	91 05       	cpc	r25, r1
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <GPIO_setupPinDirection+0x3a>
    1b14:	43 c0       	rjmp	.+134    	; 0x1b9c <GPIO_setupPinDirection+0xc0>
    1b16:	2c 81       	ldd	r18, Y+4	; 0x04
    1b18:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1a:	22 30       	cpi	r18, 0x02	; 2
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	2c f4       	brge	.+10     	; 0x1b2a <GPIO_setupPinDirection+0x4e>
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	9d 81       	ldd	r25, Y+5	; 0x05
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	71 f0       	breq	.+28     	; 0x1b44 <GPIO_setupPinDirection+0x68>
    1b28:	bc c0       	rjmp	.+376    	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
    1b2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b2e:	22 30       	cpi	r18, 0x02	; 2
    1b30:	31 05       	cpc	r19, r1
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <GPIO_setupPinDirection+0x5a>
    1b34:	5f c0       	rjmp	.+190    	; 0x1bf4 <GPIO_setupPinDirection+0x118>
    1b36:	8c 81       	ldd	r24, Y+4	; 0x04
    1b38:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3a:	83 30       	cpi	r24, 0x03	; 3
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <GPIO_setupPinDirection+0x66>
    1b40:	85 c0       	rjmp	.+266    	; 0x1c4c <GPIO_setupPinDirection+0x170>
    1b42:	af c0       	rjmp	.+350    	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	a1 f4       	brne	.+40     	; 0x1b72 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1b4a:	aa e3       	ldi	r26, 0x3A	; 58
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	ea e3       	ldi	r30, 0x3A	; 58
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	48 2f       	mov	r20, r24
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	02 2e       	mov	r0, r18
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <GPIO_setupPinDirection+0x8c>
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	0a 94       	dec	r0
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <GPIO_setupPinDirection+0x88>
    1b6c:	84 2b       	or	r24, r20
    1b6e:	8c 93       	st	X, r24
    1b70:	98 c0       	rjmp	.+304    	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1b72:	aa e3       	ldi	r26, 0x3A	; 58
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	ea e3       	ldi	r30, 0x3A	; 58
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	48 2f       	mov	r20, r24
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	02 2e       	mov	r0, r18
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <GPIO_setupPinDirection+0xb4>
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	0a 94       	dec	r0
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <GPIO_setupPinDirection+0xb0>
    1b94:	80 95       	com	r24
    1b96:	84 23       	and	r24, r20
    1b98:	8c 93       	st	X, r24
    1b9a:	83 c0       	rjmp	.+262    	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	a1 f4       	brne	.+40     	; 0x1bca <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1ba2:	a7 e3       	ldi	r26, 0x37	; 55
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e7 e3       	ldi	r30, 0x37	; 55
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	48 2f       	mov	r20, r24
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	02 2e       	mov	r0, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <GPIO_setupPinDirection+0xe4>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <GPIO_setupPinDirection+0xe0>
    1bc4:	84 2b       	or	r24, r20
    1bc6:	8c 93       	st	X, r24
    1bc8:	6c c0       	rjmp	.+216    	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1bca:	a7 e3       	ldi	r26, 0x37	; 55
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e7 e3       	ldi	r30, 0x37	; 55
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	48 2f       	mov	r20, r24
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	02 2e       	mov	r0, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <GPIO_setupPinDirection+0x10c>
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	0a 94       	dec	r0
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <GPIO_setupPinDirection+0x108>
    1bec:	80 95       	com	r24
    1bee:	84 23       	and	r24, r20
    1bf0:	8c 93       	st	X, r24
    1bf2:	57 c0       	rjmp	.+174    	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	81 30       	cpi	r24, 0x01	; 1
    1bf8:	a1 f4       	brne	.+40     	; 0x1c22 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1bfa:	a4 e3       	ldi	r26, 0x34	; 52
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e4 e3       	ldi	r30, 0x34	; 52
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 2e       	mov	r0, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <GPIO_setupPinDirection+0x13c>
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	0a 94       	dec	r0
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <GPIO_setupPinDirection+0x138>
    1c1c:	84 2b       	or	r24, r20
    1c1e:	8c 93       	st	X, r24
    1c20:	40 c0       	rjmp	.+128    	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1c22:	a4 e3       	ldi	r26, 0x34	; 52
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e4 e3       	ldi	r30, 0x34	; 52
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	48 2f       	mov	r20, r24
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	02 2e       	mov	r0, r18
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <GPIO_setupPinDirection+0x164>
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	0a 94       	dec	r0
    1c42:	e2 f7       	brpl	.-8      	; 0x1c3c <GPIO_setupPinDirection+0x160>
    1c44:	80 95       	com	r24
    1c46:	84 23       	and	r24, r20
    1c48:	8c 93       	st	X, r24
    1c4a:	2b c0       	rjmp	.+86     	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	a1 f4       	brne	.+40     	; 0x1c7a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1c52:	a1 e3       	ldi	r26, 0x31	; 49
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e1 e3       	ldi	r30, 0x31	; 49
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	48 2f       	mov	r20, r24
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	02 2e       	mov	r0, r18
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <GPIO_setupPinDirection+0x194>
    1c6c:	88 0f       	add	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	0a 94       	dec	r0
    1c72:	e2 f7       	brpl	.-8      	; 0x1c6c <GPIO_setupPinDirection+0x190>
    1c74:	84 2b       	or	r24, r20
    1c76:	8c 93       	st	X, r24
    1c78:	14 c0       	rjmp	.+40     	; 0x1ca2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1c7a:	a1 e3       	ldi	r26, 0x31	; 49
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e1 e3       	ldi	r30, 0x31	; 49
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	48 2f       	mov	r20, r24
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	02 2e       	mov	r0, r18
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <GPIO_setupPinDirection+0x1bc>
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	0a 94       	dec	r0
    1c9a:	e2 f7       	brpl	.-8      	; 0x1c94 <GPIO_setupPinDirection+0x1b8>
    1c9c:	80 95       	com	r24
    1c9e:	84 23       	and	r24, r20
    1ca0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <GPIO_writePin+0x6>
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <GPIO_writePin+0x8>
    1cba:	0f 92       	push	r0
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	6a 83       	std	Y+2, r22	; 0x02
    1cc4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	88 30       	cpi	r24, 0x08	; 8
    1cca:	08 f0       	brcs	.+2      	; 0x1cce <GPIO_writePin+0x1c>
    1ccc:	d5 c0       	rjmp	.+426    	; 0x1e78 <GPIO_writePin+0x1c6>
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	84 30       	cpi	r24, 0x04	; 4
    1cd2:	08 f0       	brcs	.+2      	; 0x1cd6 <GPIO_writePin+0x24>
    1cd4:	d1 c0       	rjmp	.+418    	; 0x1e78 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	3d 83       	std	Y+5, r19	; 0x05
    1cde:	2c 83       	std	Y+4, r18	; 0x04
    1ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <GPIO_writePin+0x3a>
    1cea:	43 c0       	rjmp	.+134    	; 0x1d72 <GPIO_writePin+0xc0>
    1cec:	2c 81       	ldd	r18, Y+4	; 0x04
    1cee:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf0:	22 30       	cpi	r18, 0x02	; 2
    1cf2:	31 05       	cpc	r19, r1
    1cf4:	2c f4       	brge	.+10     	; 0x1d00 <GPIO_writePin+0x4e>
    1cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	71 f0       	breq	.+28     	; 0x1d1a <GPIO_writePin+0x68>
    1cfe:	bc c0       	rjmp	.+376    	; 0x1e78 <GPIO_writePin+0x1c6>
    1d00:	2c 81       	ldd	r18, Y+4	; 0x04
    1d02:	3d 81       	ldd	r19, Y+5	; 0x05
    1d04:	22 30       	cpi	r18, 0x02	; 2
    1d06:	31 05       	cpc	r19, r1
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <GPIO_writePin+0x5a>
    1d0a:	5f c0       	rjmp	.+190    	; 0x1dca <GPIO_writePin+0x118>
    1d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d10:	83 30       	cpi	r24, 0x03	; 3
    1d12:	91 05       	cpc	r25, r1
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <GPIO_writePin+0x66>
    1d16:	85 c0       	rjmp	.+266    	; 0x1e22 <GPIO_writePin+0x170>
    1d18:	af c0       	rjmp	.+350    	; 0x1e78 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	81 30       	cpi	r24, 0x01	; 1
    1d1e:	a1 f4       	brne	.+40     	; 0x1d48 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1d20:	ab e3       	ldi	r26, 0x3B	; 59
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	eb e3       	ldi	r30, 0x3B	; 59
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	48 2f       	mov	r20, r24
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	02 2e       	mov	r0, r18
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <GPIO_writePin+0x8c>
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	0a 94       	dec	r0
    1d40:	e2 f7       	brpl	.-8      	; 0x1d3a <GPIO_writePin+0x88>
    1d42:	84 2b       	or	r24, r20
    1d44:	8c 93       	st	X, r24
    1d46:	98 c0       	rjmp	.+304    	; 0x1e78 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1d48:	ab e3       	ldi	r26, 0x3B	; 59
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	eb e3       	ldi	r30, 0x3B	; 59
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	48 2f       	mov	r20, r24
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	02 2e       	mov	r0, r18
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <GPIO_writePin+0xb4>
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	0a 94       	dec	r0
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <GPIO_writePin+0xb0>
    1d6a:	80 95       	com	r24
    1d6c:	84 23       	and	r24, r20
    1d6e:	8c 93       	st	X, r24
    1d70:	83 c0       	rjmp	.+262    	; 0x1e78 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	a1 f4       	brne	.+40     	; 0x1da0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1d78:	a8 e3       	ldi	r26, 0x38	; 56
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e8 e3       	ldi	r30, 0x38	; 56
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	48 2f       	mov	r20, r24
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	28 2f       	mov	r18, r24
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	02 2e       	mov	r0, r18
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <GPIO_writePin+0xe4>
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	0a 94       	dec	r0
    1d98:	e2 f7       	brpl	.-8      	; 0x1d92 <GPIO_writePin+0xe0>
    1d9a:	84 2b       	or	r24, r20
    1d9c:	8c 93       	st	X, r24
    1d9e:	6c c0       	rjmp	.+216    	; 0x1e78 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1da0:	a8 e3       	ldi	r26, 0x38	; 56
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e8 e3       	ldi	r30, 0x38	; 56
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	48 2f       	mov	r20, r24
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	02 2e       	mov	r0, r18
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <GPIO_writePin+0x10c>
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	0a 94       	dec	r0
    1dc0:	e2 f7       	brpl	.-8      	; 0x1dba <GPIO_writePin+0x108>
    1dc2:	80 95       	com	r24
    1dc4:	84 23       	and	r24, r20
    1dc6:	8c 93       	st	X, r24
    1dc8:	57 c0       	rjmp	.+174    	; 0x1e78 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	81 30       	cpi	r24, 0x01	; 1
    1dce:	a1 f4       	brne	.+40     	; 0x1df8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1dd0:	a5 e3       	ldi	r26, 0x35	; 53
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e5 e3       	ldi	r30, 0x35	; 53
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	48 2f       	mov	r20, r24
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	02 2e       	mov	r0, r18
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <GPIO_writePin+0x13c>
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	0a 94       	dec	r0
    1df0:	e2 f7       	brpl	.-8      	; 0x1dea <GPIO_writePin+0x138>
    1df2:	84 2b       	or	r24, r20
    1df4:	8c 93       	st	X, r24
    1df6:	40 c0       	rjmp	.+128    	; 0x1e78 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1df8:	a5 e3       	ldi	r26, 0x35	; 53
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e5 e3       	ldi	r30, 0x35	; 53
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	48 2f       	mov	r20, r24
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	28 2f       	mov	r18, r24
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	02 2e       	mov	r0, r18
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <GPIO_writePin+0x164>
    1e12:	88 0f       	add	r24, r24
    1e14:	99 1f       	adc	r25, r25
    1e16:	0a 94       	dec	r0
    1e18:	e2 f7       	brpl	.-8      	; 0x1e12 <GPIO_writePin+0x160>
    1e1a:	80 95       	com	r24
    1e1c:	84 23       	and	r24, r20
    1e1e:	8c 93       	st	X, r24
    1e20:	2b c0       	rjmp	.+86     	; 0x1e78 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	81 30       	cpi	r24, 0x01	; 1
    1e26:	a1 f4       	brne	.+40     	; 0x1e50 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1e28:	a2 e3       	ldi	r26, 0x32	; 50
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e2 e3       	ldi	r30, 0x32	; 50
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	48 2f       	mov	r20, r24
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	02 2e       	mov	r0, r18
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <GPIO_writePin+0x194>
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	0a 94       	dec	r0
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <GPIO_writePin+0x190>
    1e4a:	84 2b       	or	r24, r20
    1e4c:	8c 93       	st	X, r24
    1e4e:	14 c0       	rjmp	.+40     	; 0x1e78 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1e50:	a2 e3       	ldi	r26, 0x32	; 50
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e2 e3       	ldi	r30, 0x32	; 50
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	48 2f       	mov	r20, r24
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	02 2e       	mov	r0, r18
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <GPIO_writePin+0x1bc>
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	0a 94       	dec	r0
    1e70:	e2 f7       	brpl	.-8      	; 0x1e6a <GPIO_writePin+0x1b8>
    1e72:	80 95       	com	r24
    1e74:	84 23       	and	r24, r20
    1e76:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <GPIO_readPin+0x6>
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <GPIO_readPin+0x8>
    1e90:	0f 92       	push	r0
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	8a 83       	std	Y+2, r24	; 0x02
    1e98:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1e9a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	88 30       	cpi	r24, 0x08	; 8
    1ea0:	08 f0       	brcs	.+2      	; 0x1ea4 <GPIO_readPin+0x1c>
    1ea2:	84 c0       	rjmp	.+264    	; 0x1fac <GPIO_readPin+0x124>
    1ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea6:	84 30       	cpi	r24, 0x04	; 4
    1ea8:	08 f0       	brcs	.+2      	; 0x1eac <GPIO_readPin+0x24>
    1eaa:	80 c0       	rjmp	.+256    	; 0x1fac <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	3d 83       	std	Y+5, r19	; 0x05
    1eb4:	2c 83       	std	Y+4, r18	; 0x04
    1eb6:	4c 81       	ldd	r20, Y+4	; 0x04
    1eb8:	5d 81       	ldd	r21, Y+5	; 0x05
    1eba:	41 30       	cpi	r20, 0x01	; 1
    1ebc:	51 05       	cpc	r21, r1
    1ebe:	79 f1       	breq	.+94     	; 0x1f1e <GPIO_readPin+0x96>
    1ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec4:	82 30       	cpi	r24, 0x02	; 2
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	34 f4       	brge	.+12     	; 0x1ed6 <GPIO_readPin+0x4e>
    1eca:	2c 81       	ldd	r18, Y+4	; 0x04
    1ecc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ece:	21 15       	cp	r18, r1
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	69 f0       	breq	.+26     	; 0x1eee <GPIO_readPin+0x66>
    1ed4:	6b c0       	rjmp	.+214    	; 0x1fac <GPIO_readPin+0x124>
    1ed6:	4c 81       	ldd	r20, Y+4	; 0x04
    1ed8:	5d 81       	ldd	r21, Y+5	; 0x05
    1eda:	42 30       	cpi	r20, 0x02	; 2
    1edc:	51 05       	cpc	r21, r1
    1ede:	b9 f1       	breq	.+110    	; 0x1f4e <GPIO_readPin+0xc6>
    1ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee4:	83 30       	cpi	r24, 0x03	; 3
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <GPIO_readPin+0x64>
    1eea:	49 c0       	rjmp	.+146    	; 0x1f7e <GPIO_readPin+0xf6>
    1eec:	5f c0       	rjmp	.+190    	; 0x1fac <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1eee:	e9 e3       	ldi	r30, 0x39	; 57
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	88 2f       	mov	r24, r24
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	a9 01       	movw	r20, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <GPIO_readPin+0x7e>
    1f02:	55 95       	asr	r21
    1f04:	47 95       	ror	r20
    1f06:	8a 95       	dec	r24
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <GPIO_readPin+0x7a>
    1f0a:	ca 01       	movw	r24, r20
    1f0c:	81 70       	andi	r24, 0x01	; 1
    1f0e:	90 70       	andi	r25, 0x00	; 0
    1f10:	88 23       	and	r24, r24
    1f12:	19 f0       	breq	.+6      	; 0x1f1a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	89 83       	std	Y+1, r24	; 0x01
    1f18:	49 c0       	rjmp	.+146    	; 0x1fac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f1a:	19 82       	std	Y+1, r1	; 0x01
    1f1c:	47 c0       	rjmp	.+142    	; 0x1fac <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1f1e:	e6 e3       	ldi	r30, 0x36	; 54
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	88 2f       	mov	r24, r24
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	a9 01       	movw	r20, r18
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <GPIO_readPin+0xae>
    1f32:	55 95       	asr	r21
    1f34:	47 95       	ror	r20
    1f36:	8a 95       	dec	r24
    1f38:	e2 f7       	brpl	.-8      	; 0x1f32 <GPIO_readPin+0xaa>
    1f3a:	ca 01       	movw	r24, r20
    1f3c:	81 70       	andi	r24, 0x01	; 1
    1f3e:	90 70       	andi	r25, 0x00	; 0
    1f40:	88 23       	and	r24, r24
    1f42:	19 f0       	breq	.+6      	; 0x1f4a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	89 83       	std	Y+1, r24	; 0x01
    1f48:	31 c0       	rjmp	.+98     	; 0x1fac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f4a:	19 82       	std	Y+1, r1	; 0x01
    1f4c:	2f c0       	rjmp	.+94     	; 0x1fac <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1f4e:	e3 e3       	ldi	r30, 0x33	; 51
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	88 2f       	mov	r24, r24
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a9 01       	movw	r20, r18
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <GPIO_readPin+0xde>
    1f62:	55 95       	asr	r21
    1f64:	47 95       	ror	r20
    1f66:	8a 95       	dec	r24
    1f68:	e2 f7       	brpl	.-8      	; 0x1f62 <GPIO_readPin+0xda>
    1f6a:	ca 01       	movw	r24, r20
    1f6c:	81 70       	andi	r24, 0x01	; 1
    1f6e:	90 70       	andi	r25, 0x00	; 0
    1f70:	88 23       	and	r24, r24
    1f72:	19 f0       	breq	.+6      	; 0x1f7a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	19 c0       	rjmp	.+50     	; 0x1fac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f7a:	19 82       	std	Y+1, r1	; 0x01
    1f7c:	17 c0       	rjmp	.+46     	; 0x1fac <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1f7e:	e0 e3       	ldi	r30, 0x30	; 48
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	28 2f       	mov	r18, r24
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	88 2f       	mov	r24, r24
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	a9 01       	movw	r20, r18
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <GPIO_readPin+0x10e>
    1f92:	55 95       	asr	r21
    1f94:	47 95       	ror	r20
    1f96:	8a 95       	dec	r24
    1f98:	e2 f7       	brpl	.-8      	; 0x1f92 <GPIO_readPin+0x10a>
    1f9a:	ca 01       	movw	r24, r20
    1f9c:	81 70       	andi	r24, 0x01	; 1
    1f9e:	90 70       	andi	r25, 0x00	; 0
    1fa0:	88 23       	and	r24, r24
    1fa2:	19 f0       	breq	.+6      	; 0x1faa <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	01 c0       	rjmp	.+2      	; 0x1fac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1faa:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	08 95       	ret

00001fbe <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1fbe:	df 93       	push	r29
    1fc0:	cf 93       	push	r28
    1fc2:	00 d0       	rcall	.+0      	; 0x1fc4 <GPIO_setupPortDirection+0x6>
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <GPIO_setupPortDirection+0x8>
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	89 83       	std	Y+1, r24	; 0x01
    1fcc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	84 30       	cpi	r24, 0x04	; 4
    1fd2:	90 f5       	brcc	.+100    	; 0x2038 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	3c 83       	std	Y+4, r19	; 0x04
    1fdc:	2b 83       	std	Y+3, r18	; 0x03
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe2:	81 30       	cpi	r24, 0x01	; 1
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	d1 f0       	breq	.+52     	; 0x201c <GPIO_setupPortDirection+0x5e>
    1fe8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fea:	3c 81       	ldd	r19, Y+4	; 0x04
    1fec:	22 30       	cpi	r18, 0x02	; 2
    1fee:	31 05       	cpc	r19, r1
    1ff0:	2c f4       	brge	.+10     	; 0x1ffc <GPIO_setupPortDirection+0x3e>
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	61 f0       	breq	.+24     	; 0x2012 <GPIO_setupPortDirection+0x54>
    1ffa:	1e c0       	rjmp	.+60     	; 0x2038 <GPIO_setupPortDirection+0x7a>
    1ffc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ffe:	3c 81       	ldd	r19, Y+4	; 0x04
    2000:	22 30       	cpi	r18, 0x02	; 2
    2002:	31 05       	cpc	r19, r1
    2004:	81 f0       	breq	.+32     	; 0x2026 <GPIO_setupPortDirection+0x68>
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	9c 81       	ldd	r25, Y+4	; 0x04
    200a:	83 30       	cpi	r24, 0x03	; 3
    200c:	91 05       	cpc	r25, r1
    200e:	81 f0       	breq	.+32     	; 0x2030 <GPIO_setupPortDirection+0x72>
    2010:	13 c0       	rjmp	.+38     	; 0x2038 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2012:	ea e3       	ldi	r30, 0x3A	; 58
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	80 83       	st	Z, r24
    201a:	0e c0       	rjmp	.+28     	; 0x2038 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    201c:	e7 e3       	ldi	r30, 0x37	; 55
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	80 83       	st	Z, r24
    2024:	09 c0       	rjmp	.+18     	; 0x2038 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2026:	e4 e3       	ldi	r30, 0x34	; 52
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	80 83       	st	Z, r24
    202e:	04 c0       	rjmp	.+8      	; 0x2038 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2030:	e1 e3       	ldi	r30, 0x31	; 49
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	80 83       	st	Z, r24
			break;
		}
	}
}
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	00 d0       	rcall	.+0      	; 0x204c <GPIO_writePort+0x6>
    204c:	00 d0       	rcall	.+0      	; 0x204e <GPIO_writePort+0x8>
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	84 30       	cpi	r24, 0x04	; 4
    205a:	90 f5       	brcc	.+100    	; 0x20c0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	28 2f       	mov	r18, r24
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	3c 83       	std	Y+4, r19	; 0x04
    2064:	2b 83       	std	Y+3, r18	; 0x03
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	9c 81       	ldd	r25, Y+4	; 0x04
    206a:	81 30       	cpi	r24, 0x01	; 1
    206c:	91 05       	cpc	r25, r1
    206e:	d1 f0       	breq	.+52     	; 0x20a4 <GPIO_writePort+0x5e>
    2070:	2b 81       	ldd	r18, Y+3	; 0x03
    2072:	3c 81       	ldd	r19, Y+4	; 0x04
    2074:	22 30       	cpi	r18, 0x02	; 2
    2076:	31 05       	cpc	r19, r1
    2078:	2c f4       	brge	.+10     	; 0x2084 <GPIO_writePort+0x3e>
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	9c 81       	ldd	r25, Y+4	; 0x04
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	61 f0       	breq	.+24     	; 0x209a <GPIO_writePort+0x54>
    2082:	1e c0       	rjmp	.+60     	; 0x20c0 <GPIO_writePort+0x7a>
    2084:	2b 81       	ldd	r18, Y+3	; 0x03
    2086:	3c 81       	ldd	r19, Y+4	; 0x04
    2088:	22 30       	cpi	r18, 0x02	; 2
    208a:	31 05       	cpc	r19, r1
    208c:	81 f0       	breq	.+32     	; 0x20ae <GPIO_writePort+0x68>
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	9c 81       	ldd	r25, Y+4	; 0x04
    2092:	83 30       	cpi	r24, 0x03	; 3
    2094:	91 05       	cpc	r25, r1
    2096:	81 f0       	breq	.+32     	; 0x20b8 <GPIO_writePort+0x72>
    2098:	13 c0       	rjmp	.+38     	; 0x20c0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    209a:	eb e3       	ldi	r30, 0x3B	; 59
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	80 83       	st	Z, r24
    20a2:	0e c0       	rjmp	.+28     	; 0x20c0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    20a4:	e8 e3       	ldi	r30, 0x38	; 56
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	80 83       	st	Z, r24
    20ac:	09 c0       	rjmp	.+18     	; 0x20c0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    20ae:	e5 e3       	ldi	r30, 0x35	; 53
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	80 83       	st	Z, r24
    20b6:	04 c0       	rjmp	.+8      	; 0x20c0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    20b8:	e2 e3       	ldi	r30, 0x32	; 50
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	80 83       	st	Z, r24
			break;
		}
	}
}
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <GPIO_readPort+0x6>
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <GPIO_readPort+0x8>
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    20dc:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	84 30       	cpi	r24, 0x04	; 4
    20e2:	90 f5       	brcc	.+100    	; 0x2148 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	3c 83       	std	Y+4, r19	; 0x04
    20ec:	2b 83       	std	Y+3, r18	; 0x03
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	81 30       	cpi	r24, 0x01	; 1
    20f4:	91 05       	cpc	r25, r1
    20f6:	d1 f0       	breq	.+52     	; 0x212c <GPIO_readPort+0x5e>
    20f8:	2b 81       	ldd	r18, Y+3	; 0x03
    20fa:	3c 81       	ldd	r19, Y+4	; 0x04
    20fc:	22 30       	cpi	r18, 0x02	; 2
    20fe:	31 05       	cpc	r19, r1
    2100:	2c f4       	brge	.+10     	; 0x210c <GPIO_readPort+0x3e>
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	9c 81       	ldd	r25, Y+4	; 0x04
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	61 f0       	breq	.+24     	; 0x2122 <GPIO_readPort+0x54>
    210a:	1e c0       	rjmp	.+60     	; 0x2148 <GPIO_readPort+0x7a>
    210c:	2b 81       	ldd	r18, Y+3	; 0x03
    210e:	3c 81       	ldd	r19, Y+4	; 0x04
    2110:	22 30       	cpi	r18, 0x02	; 2
    2112:	31 05       	cpc	r19, r1
    2114:	81 f0       	breq	.+32     	; 0x2136 <GPIO_readPort+0x68>
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	9c 81       	ldd	r25, Y+4	; 0x04
    211a:	83 30       	cpi	r24, 0x03	; 3
    211c:	91 05       	cpc	r25, r1
    211e:	81 f0       	breq	.+32     	; 0x2140 <GPIO_readPort+0x72>
    2120:	13 c0       	rjmp	.+38     	; 0x2148 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2122:	e9 e3       	ldi	r30, 0x39	; 57
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	0e c0       	rjmp	.+28     	; 0x2148 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    212c:	e6 e3       	ldi	r30, 0x36	; 54
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	09 c0       	rjmp	.+18     	; 0x2148 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2136:	e3 e3       	ldi	r30, 0x33	; 51
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	04 c0       	rjmp	.+8      	; 0x2148 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2140:	e0 e3       	ldi	r30, 0x30	; 48
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2148:	89 81       	ldd	r24, Y+1	; 0x01
}
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	00 d0       	rcall	.+0      	; 0x215e <KEYPAD_getPressedKey+0x6>
    215e:	0f 92       	push	r0
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2164:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2166:	1b 82       	std	Y+3, r1	; 0x03
    2168:	43 c0       	rjmp	.+134    	; 0x21f0 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	98 2f       	mov	r25, r24
    2176:	9c 5f       	subi	r25, 0xFC	; 252
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	69 2f       	mov	r22, r25
    217c:	41 e0       	ldi	r20, 0x01	; 1
    217e:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	88 2f       	mov	r24, r24
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	9c 01       	movw	r18, r24
    218a:	2c 5f       	subi	r18, 0xFC	; 252
    218c:	3f 4f       	sbci	r19, 0xFF	; 255
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <KEYPAD_getPressedKey+0x40>
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	2a 95       	dec	r18
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <KEYPAD_getPressedKey+0x3c>
    219c:	80 95       	com	r24
    219e:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	69 81       	ldd	r22, Y+1	; 0x01
    21a4:	0e 94 23 10 	call	0x2046	; 0x2046 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    21a8:	1a 82       	std	Y+2, r1	; 0x02
    21aa:	1c c0       	rjmp	.+56     	; 0x21e4 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	6a 81       	ldd	r22, Y+2	; 0x02
    21b0:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <GPIO_readPin>
    21b4:	88 23       	and	r24, r24
    21b6:	99 f4       	brne	.+38     	; 0x21de <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	88 2f       	mov	r24, r24
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	88 0f       	add	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	88 0f       	add	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	98 2f       	mov	r25, r24
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	89 0f       	add	r24, r25
    21cc:	8f 5f       	subi	r24, 0xFF	; 255
    21ce:	0e 94 fd 10 	call	0x21fa	; 0x21fa <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	8f 5f       	subi	r24, 0xFF	; 255
    21e2:	8a 83       	std	Y+2, r24	; 0x02
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	84 30       	cpi	r24, 0x04	; 4
    21e8:	08 f3       	brcs	.-62     	; 0x21ac <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	8f 5f       	subi	r24, 0xFF	; 255
    21ee:	8b 83       	std	Y+3, r24	; 0x03
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	84 30       	cpi	r24, 0x04	; 4
    21f4:	08 f4       	brcc	.+2      	; 0x21f8 <KEYPAD_getPressedKey+0xa0>
    21f6:	b9 cf       	rjmp	.-142    	; 0x216a <KEYPAD_getPressedKey+0x12>
    21f8:	b6 cf       	rjmp	.-148    	; 0x2166 <KEYPAD_getPressedKey+0xe>

000021fa <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2200:	00 d0       	rcall	.+0      	; 0x2202 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2208:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	3c 83       	std	Y+4, r19	; 0x04
    2212:	2b 83       	std	Y+3, r18	; 0x03
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	9c 81       	ldd	r25, Y+4	; 0x04
    2218:	88 30       	cpi	r24, 0x08	; 8
    221a:	91 05       	cpc	r25, r1
    221c:	09 f4       	brne	.+2      	; 0x2220 <KEYPAD_4x4_adjustKeyNumber+0x26>
    221e:	70 c0       	rjmp	.+224    	; 0x2300 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2220:	2b 81       	ldd	r18, Y+3	; 0x03
    2222:	3c 81       	ldd	r19, Y+4	; 0x04
    2224:	29 30       	cpi	r18, 0x09	; 9
    2226:	31 05       	cpc	r19, r1
    2228:	5c f5       	brge	.+86     	; 0x2280 <KEYPAD_4x4_adjustKeyNumber+0x86>
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	84 30       	cpi	r24, 0x04	; 4
    2230:	91 05       	cpc	r25, r1
    2232:	09 f4       	brne	.+2      	; 0x2236 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2234:	59 c0       	rjmp	.+178    	; 0x22e8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2236:	2b 81       	ldd	r18, Y+3	; 0x03
    2238:	3c 81       	ldd	r19, Y+4	; 0x04
    223a:	25 30       	cpi	r18, 0x05	; 5
    223c:	31 05       	cpc	r19, r1
    223e:	9c f4       	brge	.+38     	; 0x2266 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	82 30       	cpi	r24, 0x02	; 2
    2246:	91 05       	cpc	r25, r1
    2248:	09 f4       	brne	.+2      	; 0x224c <KEYPAD_4x4_adjustKeyNumber+0x52>
    224a:	48 c0       	rjmp	.+144    	; 0x22dc <KEYPAD_4x4_adjustKeyNumber+0xe2>
    224c:	2b 81       	ldd	r18, Y+3	; 0x03
    224e:	3c 81       	ldd	r19, Y+4	; 0x04
    2250:	23 30       	cpi	r18, 0x03	; 3
    2252:	31 05       	cpc	r19, r1
    2254:	0c f0       	brlt	.+2      	; 0x2258 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2256:	45 c0       	rjmp	.+138    	; 0x22e2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	9c 81       	ldd	r25, Y+4	; 0x04
    225c:	81 30       	cpi	r24, 0x01	; 1
    225e:	91 05       	cpc	r25, r1
    2260:	09 f4       	brne	.+2      	; 0x2264 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2262:	39 c0       	rjmp	.+114    	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2264:	67 c0       	rjmp	.+206    	; 0x2334 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2266:	2b 81       	ldd	r18, Y+3	; 0x03
    2268:	3c 81       	ldd	r19, Y+4	; 0x04
    226a:	26 30       	cpi	r18, 0x06	; 6
    226c:	31 05       	cpc	r19, r1
    226e:	09 f4       	brne	.+2      	; 0x2272 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2270:	41 c0       	rjmp	.+130    	; 0x22f4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	9c 81       	ldd	r25, Y+4	; 0x04
    2276:	87 30       	cpi	r24, 0x07	; 7
    2278:	91 05       	cpc	r25, r1
    227a:	0c f0       	brlt	.+2      	; 0x227e <KEYPAD_4x4_adjustKeyNumber+0x84>
    227c:	3e c0       	rjmp	.+124    	; 0x22fa <KEYPAD_4x4_adjustKeyNumber+0x100>
    227e:	37 c0       	rjmp	.+110    	; 0x22ee <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2280:	2b 81       	ldd	r18, Y+3	; 0x03
    2282:	3c 81       	ldd	r19, Y+4	; 0x04
    2284:	2c 30       	cpi	r18, 0x0C	; 12
    2286:	31 05       	cpc	r19, r1
    2288:	09 f4       	brne	.+2      	; 0x228c <KEYPAD_4x4_adjustKeyNumber+0x92>
    228a:	46 c0       	rjmp	.+140    	; 0x2318 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	8d 30       	cpi	r24, 0x0D	; 13
    2292:	91 05       	cpc	r25, r1
    2294:	5c f4       	brge	.+22     	; 0x22ac <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2296:	2b 81       	ldd	r18, Y+3	; 0x03
    2298:	3c 81       	ldd	r19, Y+4	; 0x04
    229a:	2a 30       	cpi	r18, 0x0A	; 10
    229c:	31 05       	cpc	r19, r1
    229e:	b1 f1       	breq	.+108    	; 0x230c <KEYPAD_4x4_adjustKeyNumber+0x112>
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	9c 81       	ldd	r25, Y+4	; 0x04
    22a4:	8b 30       	cpi	r24, 0x0B	; 11
    22a6:	91 05       	cpc	r25, r1
    22a8:	a4 f5       	brge	.+104    	; 0x2312 <KEYPAD_4x4_adjustKeyNumber+0x118>
    22aa:	2d c0       	rjmp	.+90     	; 0x2306 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    22ac:	2b 81       	ldd	r18, Y+3	; 0x03
    22ae:	3c 81       	ldd	r19, Y+4	; 0x04
    22b0:	2e 30       	cpi	r18, 0x0E	; 14
    22b2:	31 05       	cpc	r19, r1
    22b4:	b9 f1       	breq	.+110    	; 0x2324 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ba:	8e 30       	cpi	r24, 0x0E	; 14
    22bc:	91 05       	cpc	r25, r1
    22be:	7c f1       	brlt	.+94     	; 0x231e <KEYPAD_4x4_adjustKeyNumber+0x124>
    22c0:	2b 81       	ldd	r18, Y+3	; 0x03
    22c2:	3c 81       	ldd	r19, Y+4	; 0x04
    22c4:	2f 30       	cpi	r18, 0x0F	; 15
    22c6:	31 05       	cpc	r19, r1
    22c8:	79 f1       	breq	.+94     	; 0x2328 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	9c 81       	ldd	r25, Y+4	; 0x04
    22ce:	80 31       	cpi	r24, 0x10	; 16
    22d0:	91 05       	cpc	r25, r1
    22d2:	69 f1       	breq	.+90     	; 0x232e <KEYPAD_4x4_adjustKeyNumber+0x134>
    22d4:	2f c0       	rjmp	.+94     	; 0x2334 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    22d6:	87 e0       	ldi	r24, 0x07	; 7
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	2e c0       	rjmp	.+92     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    22dc:	88 e0       	ldi	r24, 0x08	; 8
    22de:	89 83       	std	Y+1, r24	; 0x01
    22e0:	2b c0       	rjmp	.+86     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    22e2:	89 e0       	ldi	r24, 0x09	; 9
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	28 c0       	rjmp	.+80     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    22e8:	85 e2       	ldi	r24, 0x25	; 37
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	25 c0       	rjmp	.+74     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    22ee:	84 e0       	ldi	r24, 0x04	; 4
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	22 c0       	rjmp	.+68     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    22f4:	85 e0       	ldi	r24, 0x05	; 5
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	1f c0       	rjmp	.+62     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    22fa:	86 e0       	ldi	r24, 0x06	; 6
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	1c c0       	rjmp	.+56     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2300:	8a e2       	ldi	r24, 0x2A	; 42
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	19 c0       	rjmp	.+50     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	89 83       	std	Y+1, r24	; 0x01
    230a:	16 c0       	rjmp	.+44     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    230c:	82 e0       	ldi	r24, 0x02	; 2
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	13 c0       	rjmp	.+38     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2312:	83 e0       	ldi	r24, 0x03	; 3
    2314:	89 83       	std	Y+1, r24	; 0x01
    2316:	10 c0       	rjmp	.+32     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2318:	8d e2       	ldi	r24, 0x2D	; 45
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	0d c0       	rjmp	.+26     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    231e:	8d e0       	ldi	r24, 0x0D	; 13
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	0a c0       	rjmp	.+20     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2324:	19 82       	std	Y+1, r1	; 0x01
    2326:	08 c0       	rjmp	.+16     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2328:	8d e3       	ldi	r24, 0x3D	; 61
    232a:	89 83       	std	Y+1, r24	; 0x01
    232c:	05 c0       	rjmp	.+10     	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    232e:	8b e2       	ldi	r24, 0x2B	; 43
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2334:	8a 81       	ldd	r24, Y+2	; 0x02
    2336:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2338:	89 81       	ldd	r24, Y+1	; 0x01
} 
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	41 e0       	ldi	r20, 0x01	; 1
    2356:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	61 e0       	ldi	r22, 0x01	; 1
    235e:	41 e0       	ldi	r20, 0x01	; 1
    2360:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	62 e0       	ldi	r22, 0x02	; 2
    2368:	41 e0       	ldi	r20, 0x01	; 1
    236a:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    236e:	82 e0       	ldi	r24, 0x02	; 2
    2370:	6f ef       	ldi	r22, 0xFF	; 255
    2372:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2376:	88 e3       	ldi	r24, 0x38	; 56
    2378:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    237c:	8c e0       	ldi	r24, 0x0C	; 12
    237e:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_sendCommand>
}
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	08 95       	ret

0000238e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    238e:	df 93       	push	r29
    2390:	cf 93       	push	r28
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
    2396:	e9 97       	sbiw	r28, 0x39	; 57
    2398:	0f b6       	in	r0, 0x3f	; 63
    239a:	f8 94       	cli
    239c:	de bf       	out	0x3e, r29	; 62
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	cd bf       	out	0x3d, r28	; 61
    23a2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	61 e0       	ldi	r22, 0x01	; 1
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	a0 e8       	ldi	r26, 0x80	; 128
    23be:	bf e3       	ldi	r27, 0x3F	; 63
    23c0:	8d ab       	std	Y+53, r24	; 0x35
    23c2:	9e ab       	std	Y+54, r25	; 0x36
    23c4:	af ab       	std	Y+55, r26	; 0x37
    23c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c8:	6d a9       	ldd	r22, Y+53	; 0x35
    23ca:	7e a9       	ldd	r23, Y+54	; 0x36
    23cc:	8f a9       	ldd	r24, Y+55	; 0x37
    23ce:	98 ad       	ldd	r25, Y+56	; 0x38
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	4a e7       	ldi	r20, 0x7A	; 122
    23d6:	53 e4       	ldi	r21, 0x43	; 67
    23d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	89 ab       	std	Y+49, r24	; 0x31
    23e2:	9a ab       	std	Y+50, r25	; 0x32
    23e4:	ab ab       	std	Y+51, r26	; 0x33
    23e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23e8:	69 a9       	ldd	r22, Y+49	; 0x31
    23ea:	7a a9       	ldd	r23, Y+50	; 0x32
    23ec:	8b a9       	ldd	r24, Y+51	; 0x33
    23ee:	9c a9       	ldd	r25, Y+52	; 0x34
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e8       	ldi	r20, 0x80	; 128
    23f6:	5f e3       	ldi	r21, 0x3F	; 63
    23f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23fc:	88 23       	and	r24, r24
    23fe:	2c f4       	brge	.+10     	; 0x240a <LCD_sendCommand+0x7c>
		__ticks = 1;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	98 ab       	std	Y+48, r25	; 0x30
    2406:	8f a7       	std	Y+47, r24	; 0x2f
    2408:	3f c0       	rjmp	.+126    	; 0x2488 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    240a:	69 a9       	ldd	r22, Y+49	; 0x31
    240c:	7a a9       	ldd	r23, Y+50	; 0x32
    240e:	8b a9       	ldd	r24, Y+51	; 0x33
    2410:	9c a9       	ldd	r25, Y+52	; 0x34
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	3f ef       	ldi	r19, 0xFF	; 255
    2416:	4f e7       	ldi	r20, 0x7F	; 127
    2418:	57 e4       	ldi	r21, 0x47	; 71
    241a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    241e:	18 16       	cp	r1, r24
    2420:	4c f5       	brge	.+82     	; 0x2474 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2422:	6d a9       	ldd	r22, Y+53	; 0x35
    2424:	7e a9       	ldd	r23, Y+54	; 0x36
    2426:	8f a9       	ldd	r24, Y+55	; 0x37
    2428:	98 ad       	ldd	r25, Y+56	; 0x38
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e2       	ldi	r20, 0x20	; 32
    2430:	51 e4       	ldi	r21, 0x41	; 65
    2432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	bc 01       	movw	r22, r24
    243c:	cd 01       	movw	r24, r26
    243e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	98 ab       	std	Y+48, r25	; 0x30
    2448:	8f a7       	std	Y+47, r24	; 0x2f
    244a:	0f c0       	rjmp	.+30     	; 0x246a <LCD_sendCommand+0xdc>
    244c:	89 e1       	ldi	r24, 0x19	; 25
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	9e a7       	std	Y+46, r25	; 0x2e
    2452:	8d a7       	std	Y+45, r24	; 0x2d
    2454:	8d a5       	ldd	r24, Y+45	; 0x2d
    2456:	9e a5       	ldd	r25, Y+46	; 0x2e
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	f1 f7       	brne	.-4      	; 0x2458 <LCD_sendCommand+0xca>
    245c:	9e a7       	std	Y+46, r25	; 0x2e
    245e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2460:	8f a5       	ldd	r24, Y+47	; 0x2f
    2462:	98 a9       	ldd	r25, Y+48	; 0x30
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	98 ab       	std	Y+48, r25	; 0x30
    2468:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246a:	8f a5       	ldd	r24, Y+47	; 0x2f
    246c:	98 a9       	ldd	r25, Y+48	; 0x30
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	69 f7       	brne	.-38     	; 0x244c <LCD_sendCommand+0xbe>
    2472:	14 c0       	rjmp	.+40     	; 0x249c <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2474:	69 a9       	ldd	r22, Y+49	; 0x31
    2476:	7a a9       	ldd	r23, Y+50	; 0x32
    2478:	8b a9       	ldd	r24, Y+51	; 0x33
    247a:	9c a9       	ldd	r25, Y+52	; 0x34
    247c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	98 ab       	std	Y+48, r25	; 0x30
    2486:	8f a7       	std	Y+47, r24	; 0x2f
    2488:	8f a5       	ldd	r24, Y+47	; 0x2f
    248a:	98 a9       	ldd	r25, Y+48	; 0x30
    248c:	9c a7       	std	Y+44, r25	; 0x2c
    248e:	8b a7       	std	Y+43, r24	; 0x2b
    2490:	8b a5       	ldd	r24, Y+43	; 0x2b
    2492:	9c a5       	ldd	r25, Y+44	; 0x2c
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <LCD_sendCommand+0x106>
    2498:	9c a7       	std	Y+44, r25	; 0x2c
    249a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	62 e0       	ldi	r22, 0x02	; 2
    24a0:	41 e0       	ldi	r20, 0x01	; 1
    24a2:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	a0 e8       	ldi	r26, 0x80	; 128
    24ac:	bf e3       	ldi	r27, 0x3F	; 63
    24ae:	8f a3       	std	Y+39, r24	; 0x27
    24b0:	98 a7       	std	Y+40, r25	; 0x28
    24b2:	a9 a7       	std	Y+41, r26	; 0x29
    24b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b6:	6f a1       	ldd	r22, Y+39	; 0x27
    24b8:	78 a5       	ldd	r23, Y+40	; 0x28
    24ba:	89 a5       	ldd	r24, Y+41	; 0x29
    24bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	4a e7       	ldi	r20, 0x7A	; 122
    24c4:	53 e4       	ldi	r21, 0x43	; 67
    24c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	8b a3       	std	Y+35, r24	; 0x23
    24d0:	9c a3       	std	Y+36, r25	; 0x24
    24d2:	ad a3       	std	Y+37, r26	; 0x25
    24d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24d6:	6b a1       	ldd	r22, Y+35	; 0x23
    24d8:	7c a1       	ldd	r23, Y+36	; 0x24
    24da:	8d a1       	ldd	r24, Y+37	; 0x25
    24dc:	9e a1       	ldd	r25, Y+38	; 0x26
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e8       	ldi	r20, 0x80	; 128
    24e4:	5f e3       	ldi	r21, 0x3F	; 63
    24e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ea:	88 23       	and	r24, r24
    24ec:	2c f4       	brge	.+10     	; 0x24f8 <LCD_sendCommand+0x16a>
		__ticks = 1;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9a a3       	std	Y+34, r25	; 0x22
    24f4:	89 a3       	std	Y+33, r24	; 0x21
    24f6:	3f c0       	rjmp	.+126    	; 0x2576 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    24f8:	6b a1       	ldd	r22, Y+35	; 0x23
    24fa:	7c a1       	ldd	r23, Y+36	; 0x24
    24fc:	8d a1       	ldd	r24, Y+37	; 0x25
    24fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	3f ef       	ldi	r19, 0xFF	; 255
    2504:	4f e7       	ldi	r20, 0x7F	; 127
    2506:	57 e4       	ldi	r21, 0x47	; 71
    2508:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    250c:	18 16       	cp	r1, r24
    250e:	4c f5       	brge	.+82     	; 0x2562 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2510:	6f a1       	ldd	r22, Y+39	; 0x27
    2512:	78 a5       	ldd	r23, Y+40	; 0x28
    2514:	89 a5       	ldd	r24, Y+41	; 0x29
    2516:	9a a5       	ldd	r25, Y+42	; 0x2a
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e2       	ldi	r20, 0x20	; 32
    251e:	51 e4       	ldi	r21, 0x41	; 65
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	bc 01       	movw	r22, r24
    252a:	cd 01       	movw	r24, r26
    252c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9a a3       	std	Y+34, r25	; 0x22
    2536:	89 a3       	std	Y+33, r24	; 0x21
    2538:	0f c0       	rjmp	.+30     	; 0x2558 <LCD_sendCommand+0x1ca>
    253a:	89 e1       	ldi	r24, 0x19	; 25
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	98 a3       	std	Y+32, r25	; 0x20
    2540:	8f 8f       	std	Y+31, r24	; 0x1f
    2542:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2544:	98 a1       	ldd	r25, Y+32	; 0x20
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <LCD_sendCommand+0x1b8>
    254a:	98 a3       	std	Y+32, r25	; 0x20
    254c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254e:	89 a1       	ldd	r24, Y+33	; 0x21
    2550:	9a a1       	ldd	r25, Y+34	; 0x22
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	9a a3       	std	Y+34, r25	; 0x22
    2556:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2558:	89 a1       	ldd	r24, Y+33	; 0x21
    255a:	9a a1       	ldd	r25, Y+34	; 0x22
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	69 f7       	brne	.-38     	; 0x253a <LCD_sendCommand+0x1ac>
    2560:	14 c0       	rjmp	.+40     	; 0x258a <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2562:	6b a1       	ldd	r22, Y+35	; 0x23
    2564:	7c a1       	ldd	r23, Y+36	; 0x24
    2566:	8d a1       	ldd	r24, Y+37	; 0x25
    2568:	9e a1       	ldd	r25, Y+38	; 0x26
    256a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9a a3       	std	Y+34, r25	; 0x22
    2574:	89 a3       	std	Y+33, r24	; 0x21
    2576:	89 a1       	ldd	r24, Y+33	; 0x21
    2578:	9a a1       	ldd	r25, Y+34	; 0x22
    257a:	9e 8f       	std	Y+30, r25	; 0x1e
    257c:	8d 8f       	std	Y+29, r24	; 0x1d
    257e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2580:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <LCD_sendCommand+0x1f4>
    2586:	9e 8f       	std	Y+30, r25	; 0x1e
    2588:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    258a:	82 e0       	ldi	r24, 0x02	; 2
    258c:	69 ad       	ldd	r22, Y+57	; 0x39
    258e:	0e 94 23 10 	call	0x2046	; 0x2046 <GPIO_writePort>
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	a0 e8       	ldi	r26, 0x80	; 128
    2598:	bf e3       	ldi	r27, 0x3F	; 63
    259a:	89 8f       	std	Y+25, r24	; 0x19
    259c:	9a 8f       	std	Y+26, r25	; 0x1a
    259e:	ab 8f       	std	Y+27, r26	; 0x1b
    25a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a2:	69 8d       	ldd	r22, Y+25	; 0x19
    25a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	4a e7       	ldi	r20, 0x7A	; 122
    25b0:	53 e4       	ldi	r21, 0x43	; 67
    25b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	8d 8b       	std	Y+21, r24	; 0x15
    25bc:	9e 8b       	std	Y+22, r25	; 0x16
    25be:	af 8b       	std	Y+23, r26	; 0x17
    25c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25c2:	6d 89       	ldd	r22, Y+21	; 0x15
    25c4:	7e 89       	ldd	r23, Y+22	; 0x16
    25c6:	8f 89       	ldd	r24, Y+23	; 0x17
    25c8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e8       	ldi	r20, 0x80	; 128
    25d0:	5f e3       	ldi	r21, 0x3F	; 63
    25d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d6:	88 23       	and	r24, r24
    25d8:	2c f4       	brge	.+10     	; 0x25e4 <LCD_sendCommand+0x256>
		__ticks = 1;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	9c 8b       	std	Y+20, r25	; 0x14
    25e0:	8b 8b       	std	Y+19, r24	; 0x13
    25e2:	3f c0       	rjmp	.+126    	; 0x2662 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    25e4:	6d 89       	ldd	r22, Y+21	; 0x15
    25e6:	7e 89       	ldd	r23, Y+22	; 0x16
    25e8:	8f 89       	ldd	r24, Y+23	; 0x17
    25ea:	98 8d       	ldd	r25, Y+24	; 0x18
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	3f ef       	ldi	r19, 0xFF	; 255
    25f0:	4f e7       	ldi	r20, 0x7F	; 127
    25f2:	57 e4       	ldi	r21, 0x47	; 71
    25f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f8:	18 16       	cp	r1, r24
    25fa:	4c f5       	brge	.+82     	; 0x264e <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fc:	69 8d       	ldd	r22, Y+25	; 0x19
    25fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2600:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2602:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e2       	ldi	r20, 0x20	; 32
    260a:	51 e4       	ldi	r21, 0x41	; 65
    260c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	bc 01       	movw	r22, r24
    2616:	cd 01       	movw	r24, r26
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	9c 8b       	std	Y+20, r25	; 0x14
    2622:	8b 8b       	std	Y+19, r24	; 0x13
    2624:	0f c0       	rjmp	.+30     	; 0x2644 <LCD_sendCommand+0x2b6>
    2626:	89 e1       	ldi	r24, 0x19	; 25
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9a 8b       	std	Y+18, r25	; 0x12
    262c:	89 8b       	std	Y+17, r24	; 0x11
    262e:	89 89       	ldd	r24, Y+17	; 0x11
    2630:	9a 89       	ldd	r25, Y+18	; 0x12
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	f1 f7       	brne	.-4      	; 0x2632 <LCD_sendCommand+0x2a4>
    2636:	9a 8b       	std	Y+18, r25	; 0x12
    2638:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263a:	8b 89       	ldd	r24, Y+19	; 0x13
    263c:	9c 89       	ldd	r25, Y+20	; 0x14
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	9c 8b       	std	Y+20, r25	; 0x14
    2642:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2644:	8b 89       	ldd	r24, Y+19	; 0x13
    2646:	9c 89       	ldd	r25, Y+20	; 0x14
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	69 f7       	brne	.-38     	; 0x2626 <LCD_sendCommand+0x298>
    264c:	14 c0       	rjmp	.+40     	; 0x2676 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264e:	6d 89       	ldd	r22, Y+21	; 0x15
    2650:	7e 89       	ldd	r23, Y+22	; 0x16
    2652:	8f 89       	ldd	r24, Y+23	; 0x17
    2654:	98 8d       	ldd	r25, Y+24	; 0x18
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9c 8b       	std	Y+20, r25	; 0x14
    2660:	8b 8b       	std	Y+19, r24	; 0x13
    2662:	8b 89       	ldd	r24, Y+19	; 0x13
    2664:	9c 89       	ldd	r25, Y+20	; 0x14
    2666:	98 8b       	std	Y+16, r25	; 0x10
    2668:	8f 87       	std	Y+15, r24	; 0x0f
    266a:	8f 85       	ldd	r24, Y+15	; 0x0f
    266c:	98 89       	ldd	r25, Y+16	; 0x10
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	f1 f7       	brne	.-4      	; 0x266e <LCD_sendCommand+0x2e0>
    2672:	98 8b       	std	Y+16, r25	; 0x10
    2674:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	62 e0       	ldi	r22, 0x02	; 2
    267a:	40 e0       	ldi	r20, 0x00	; 0
    267c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	a0 e8       	ldi	r26, 0x80	; 128
    2686:	bf e3       	ldi	r27, 0x3F	; 63
    2688:	8b 87       	std	Y+11, r24	; 0x0b
    268a:	9c 87       	std	Y+12, r25	; 0x0c
    268c:	ad 87       	std	Y+13, r26	; 0x0d
    268e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2690:	6b 85       	ldd	r22, Y+11	; 0x0b
    2692:	7c 85       	ldd	r23, Y+12	; 0x0c
    2694:	8d 85       	ldd	r24, Y+13	; 0x0d
    2696:	9e 85       	ldd	r25, Y+14	; 0x0e
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	4a e7       	ldi	r20, 0x7A	; 122
    269e:	53 e4       	ldi	r21, 0x43	; 67
    26a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	8f 83       	std	Y+7, r24	; 0x07
    26aa:	98 87       	std	Y+8, r25	; 0x08
    26ac:	a9 87       	std	Y+9, r26	; 0x09
    26ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26b0:	6f 81       	ldd	r22, Y+7	; 0x07
    26b2:	78 85       	ldd	r23, Y+8	; 0x08
    26b4:	89 85       	ldd	r24, Y+9	; 0x09
    26b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e8       	ldi	r20, 0x80	; 128
    26be:	5f e3       	ldi	r21, 0x3F	; 63
    26c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26c4:	88 23       	and	r24, r24
    26c6:	2c f4       	brge	.+10     	; 0x26d2 <LCD_sendCommand+0x344>
		__ticks = 1;
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	9e 83       	std	Y+6, r25	; 0x06
    26ce:	8d 83       	std	Y+5, r24	; 0x05
    26d0:	3f c0       	rjmp	.+126    	; 0x2750 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    26d2:	6f 81       	ldd	r22, Y+7	; 0x07
    26d4:	78 85       	ldd	r23, Y+8	; 0x08
    26d6:	89 85       	ldd	r24, Y+9	; 0x09
    26d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	3f ef       	ldi	r19, 0xFF	; 255
    26de:	4f e7       	ldi	r20, 0x7F	; 127
    26e0:	57 e4       	ldi	r21, 0x47	; 71
    26e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26e6:	18 16       	cp	r1, r24
    26e8:	4c f5       	brge	.+82     	; 0x273c <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	40 e2       	ldi	r20, 0x20	; 32
    26f8:	51 e4       	ldi	r21, 0x41	; 65
    26fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	bc 01       	movw	r22, r24
    2704:	cd 01       	movw	r24, r26
    2706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	9e 83       	std	Y+6, r25	; 0x06
    2710:	8d 83       	std	Y+5, r24	; 0x05
    2712:	0f c0       	rjmp	.+30     	; 0x2732 <LCD_sendCommand+0x3a4>
    2714:	89 e1       	ldi	r24, 0x19	; 25
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	9c 83       	std	Y+4, r25	; 0x04
    271a:	8b 83       	std	Y+3, r24	; 0x03
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	9c 81       	ldd	r25, Y+4	; 0x04
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	f1 f7       	brne	.-4      	; 0x2720 <LCD_sendCommand+0x392>
    2724:	9c 83       	std	Y+4, r25	; 0x04
    2726:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2728:	8d 81       	ldd	r24, Y+5	; 0x05
    272a:	9e 81       	ldd	r25, Y+6	; 0x06
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	9e 83       	std	Y+6, r25	; 0x06
    2730:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2732:	8d 81       	ldd	r24, Y+5	; 0x05
    2734:	9e 81       	ldd	r25, Y+6	; 0x06
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	69 f7       	brne	.-38     	; 0x2714 <LCD_sendCommand+0x386>
    273a:	14 c0       	rjmp	.+40     	; 0x2764 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273c:	6f 81       	ldd	r22, Y+7	; 0x07
    273e:	78 85       	ldd	r23, Y+8	; 0x08
    2740:	89 85       	ldd	r24, Y+9	; 0x09
    2742:	9a 85       	ldd	r25, Y+10	; 0x0a
    2744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	9e 83       	std	Y+6, r25	; 0x06
    274e:	8d 83       	std	Y+5, r24	; 0x05
    2750:	8d 81       	ldd	r24, Y+5	; 0x05
    2752:	9e 81       	ldd	r25, Y+6	; 0x06
    2754:	9a 83       	std	Y+2, r25	; 0x02
    2756:	89 83       	std	Y+1, r24	; 0x01
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	9a 81       	ldd	r25, Y+2	; 0x02
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <LCD_sendCommand+0x3ce>
    2760:	9a 83       	std	Y+2, r25	; 0x02
    2762:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2764:	e9 96       	adiw	r28, 0x39	; 57
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
    277e:	e9 97       	sbiw	r28, 0x39	; 57
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	de bf       	out	0x3e, r29	; 62
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	cd bf       	out	0x3d, r28	; 61
    278a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	41 e0       	ldi	r20, 0x01	; 1
    2792:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	61 e0       	ldi	r22, 0x01	; 1
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	a0 e8       	ldi	r26, 0x80	; 128
    27a6:	bf e3       	ldi	r27, 0x3F	; 63
    27a8:	8d ab       	std	Y+53, r24	; 0x35
    27aa:	9e ab       	std	Y+54, r25	; 0x36
    27ac:	af ab       	std	Y+55, r26	; 0x37
    27ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b0:	6d a9       	ldd	r22, Y+53	; 0x35
    27b2:	7e a9       	ldd	r23, Y+54	; 0x36
    27b4:	8f a9       	ldd	r24, Y+55	; 0x37
    27b6:	98 ad       	ldd	r25, Y+56	; 0x38
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	4a e7       	ldi	r20, 0x7A	; 122
    27be:	53 e4       	ldi	r21, 0x43	; 67
    27c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	89 ab       	std	Y+49, r24	; 0x31
    27ca:	9a ab       	std	Y+50, r25	; 0x32
    27cc:	ab ab       	std	Y+51, r26	; 0x33
    27ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27d0:	69 a9       	ldd	r22, Y+49	; 0x31
    27d2:	7a a9       	ldd	r23, Y+50	; 0x32
    27d4:	8b a9       	ldd	r24, Y+51	; 0x33
    27d6:	9c a9       	ldd	r25, Y+52	; 0x34
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	40 e8       	ldi	r20, 0x80	; 128
    27de:	5f e3       	ldi	r21, 0x3F	; 63
    27e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27e4:	88 23       	and	r24, r24
    27e6:	2c f4       	brge	.+10     	; 0x27f2 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	98 ab       	std	Y+48, r25	; 0x30
    27ee:	8f a7       	std	Y+47, r24	; 0x2f
    27f0:	3f c0       	rjmp	.+126    	; 0x2870 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    27f2:	69 a9       	ldd	r22, Y+49	; 0x31
    27f4:	7a a9       	ldd	r23, Y+50	; 0x32
    27f6:	8b a9       	ldd	r24, Y+51	; 0x33
    27f8:	9c a9       	ldd	r25, Y+52	; 0x34
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	3f ef       	ldi	r19, 0xFF	; 255
    27fe:	4f e7       	ldi	r20, 0x7F	; 127
    2800:	57 e4       	ldi	r21, 0x47	; 71
    2802:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2806:	18 16       	cp	r1, r24
    2808:	4c f5       	brge	.+82     	; 0x285c <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280a:	6d a9       	ldd	r22, Y+53	; 0x35
    280c:	7e a9       	ldd	r23, Y+54	; 0x36
    280e:	8f a9       	ldd	r24, Y+55	; 0x37
    2810:	98 ad       	ldd	r25, Y+56	; 0x38
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e2       	ldi	r20, 0x20	; 32
    2818:	51 e4       	ldi	r21, 0x41	; 65
    281a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	bc 01       	movw	r22, r24
    2824:	cd 01       	movw	r24, r26
    2826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	98 ab       	std	Y+48, r25	; 0x30
    2830:	8f a7       	std	Y+47, r24	; 0x2f
    2832:	0f c0       	rjmp	.+30     	; 0x2852 <LCD_displayCharacter+0xdc>
    2834:	89 e1       	ldi	r24, 0x19	; 25
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	9e a7       	std	Y+46, r25	; 0x2e
    283a:	8d a7       	std	Y+45, r24	; 0x2d
    283c:	8d a5       	ldd	r24, Y+45	; 0x2d
    283e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	f1 f7       	brne	.-4      	; 0x2840 <LCD_displayCharacter+0xca>
    2844:	9e a7       	std	Y+46, r25	; 0x2e
    2846:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2848:	8f a5       	ldd	r24, Y+47	; 0x2f
    284a:	98 a9       	ldd	r25, Y+48	; 0x30
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	98 ab       	std	Y+48, r25	; 0x30
    2850:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2852:	8f a5       	ldd	r24, Y+47	; 0x2f
    2854:	98 a9       	ldd	r25, Y+48	; 0x30
    2856:	00 97       	sbiw	r24, 0x00	; 0
    2858:	69 f7       	brne	.-38     	; 0x2834 <LCD_displayCharacter+0xbe>
    285a:	14 c0       	rjmp	.+40     	; 0x2884 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    285c:	69 a9       	ldd	r22, Y+49	; 0x31
    285e:	7a a9       	ldd	r23, Y+50	; 0x32
    2860:	8b a9       	ldd	r24, Y+51	; 0x33
    2862:	9c a9       	ldd	r25, Y+52	; 0x34
    2864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	98 ab       	std	Y+48, r25	; 0x30
    286e:	8f a7       	std	Y+47, r24	; 0x2f
    2870:	8f a5       	ldd	r24, Y+47	; 0x2f
    2872:	98 a9       	ldd	r25, Y+48	; 0x30
    2874:	9c a7       	std	Y+44, r25	; 0x2c
    2876:	8b a7       	std	Y+43, r24	; 0x2b
    2878:	8b a5       	ldd	r24, Y+43	; 0x2b
    287a:	9c a5       	ldd	r25, Y+44	; 0x2c
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	f1 f7       	brne	.-4      	; 0x287c <LCD_displayCharacter+0x106>
    2880:	9c a7       	std	Y+44, r25	; 0x2c
    2882:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	62 e0       	ldi	r22, 0x02	; 2
    2888:	41 e0       	ldi	r20, 0x01	; 1
    288a:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	a0 e8       	ldi	r26, 0x80	; 128
    2894:	bf e3       	ldi	r27, 0x3F	; 63
    2896:	8f a3       	std	Y+39, r24	; 0x27
    2898:	98 a7       	std	Y+40, r25	; 0x28
    289a:	a9 a7       	std	Y+41, r26	; 0x29
    289c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289e:	6f a1       	ldd	r22, Y+39	; 0x27
    28a0:	78 a5       	ldd	r23, Y+40	; 0x28
    28a2:	89 a5       	ldd	r24, Y+41	; 0x29
    28a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	4a e7       	ldi	r20, 0x7A	; 122
    28ac:	53 e4       	ldi	r21, 0x43	; 67
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	8b a3       	std	Y+35, r24	; 0x23
    28b8:	9c a3       	std	Y+36, r25	; 0x24
    28ba:	ad a3       	std	Y+37, r26	; 0x25
    28bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28be:	6b a1       	ldd	r22, Y+35	; 0x23
    28c0:	7c a1       	ldd	r23, Y+36	; 0x24
    28c2:	8d a1       	ldd	r24, Y+37	; 0x25
    28c4:	9e a1       	ldd	r25, Y+38	; 0x26
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e8       	ldi	r20, 0x80	; 128
    28cc:	5f e3       	ldi	r21, 0x3F	; 63
    28ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d2:	88 23       	and	r24, r24
    28d4:	2c f4       	brge	.+10     	; 0x28e0 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	9a a3       	std	Y+34, r25	; 0x22
    28dc:	89 a3       	std	Y+33, r24	; 0x21
    28de:	3f c0       	rjmp	.+126    	; 0x295e <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    28e0:	6b a1       	ldd	r22, Y+35	; 0x23
    28e2:	7c a1       	ldd	r23, Y+36	; 0x24
    28e4:	8d a1       	ldd	r24, Y+37	; 0x25
    28e6:	9e a1       	ldd	r25, Y+38	; 0x26
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	3f ef       	ldi	r19, 0xFF	; 255
    28ec:	4f e7       	ldi	r20, 0x7F	; 127
    28ee:	57 e4       	ldi	r21, 0x47	; 71
    28f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28f4:	18 16       	cp	r1, r24
    28f6:	4c f5       	brge	.+82     	; 0x294a <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f8:	6f a1       	ldd	r22, Y+39	; 0x27
    28fa:	78 a5       	ldd	r23, Y+40	; 0x28
    28fc:	89 a5       	ldd	r24, Y+41	; 0x29
    28fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e2       	ldi	r20, 0x20	; 32
    2906:	51 e4       	ldi	r21, 0x41	; 65
    2908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	bc 01       	movw	r22, r24
    2912:	cd 01       	movw	r24, r26
    2914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	9a a3       	std	Y+34, r25	; 0x22
    291e:	89 a3       	std	Y+33, r24	; 0x21
    2920:	0f c0       	rjmp	.+30     	; 0x2940 <LCD_displayCharacter+0x1ca>
    2922:	89 e1       	ldi	r24, 0x19	; 25
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	98 a3       	std	Y+32, r25	; 0x20
    2928:	8f 8f       	std	Y+31, r24	; 0x1f
    292a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    292c:	98 a1       	ldd	r25, Y+32	; 0x20
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <LCD_displayCharacter+0x1b8>
    2932:	98 a3       	std	Y+32, r25	; 0x20
    2934:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2936:	89 a1       	ldd	r24, Y+33	; 0x21
    2938:	9a a1       	ldd	r25, Y+34	; 0x22
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	9a a3       	std	Y+34, r25	; 0x22
    293e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2940:	89 a1       	ldd	r24, Y+33	; 0x21
    2942:	9a a1       	ldd	r25, Y+34	; 0x22
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	69 f7       	brne	.-38     	; 0x2922 <LCD_displayCharacter+0x1ac>
    2948:	14 c0       	rjmp	.+40     	; 0x2972 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294a:	6b a1       	ldd	r22, Y+35	; 0x23
    294c:	7c a1       	ldd	r23, Y+36	; 0x24
    294e:	8d a1       	ldd	r24, Y+37	; 0x25
    2950:	9e a1       	ldd	r25, Y+38	; 0x26
    2952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	9a a3       	std	Y+34, r25	; 0x22
    295c:	89 a3       	std	Y+33, r24	; 0x21
    295e:	89 a1       	ldd	r24, Y+33	; 0x21
    2960:	9a a1       	ldd	r25, Y+34	; 0x22
    2962:	9e 8f       	std	Y+30, r25	; 0x1e
    2964:	8d 8f       	std	Y+29, r24	; 0x1d
    2966:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2968:	9e 8d       	ldd	r25, Y+30	; 0x1e
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <LCD_displayCharacter+0x1f4>
    296e:	9e 8f       	std	Y+30, r25	; 0x1e
    2970:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2972:	82 e0       	ldi	r24, 0x02	; 2
    2974:	69 ad       	ldd	r22, Y+57	; 0x39
    2976:	0e 94 23 10 	call	0x2046	; 0x2046 <GPIO_writePort>
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	a0 e8       	ldi	r26, 0x80	; 128
    2980:	bf e3       	ldi	r27, 0x3F	; 63
    2982:	89 8f       	std	Y+25, r24	; 0x19
    2984:	9a 8f       	std	Y+26, r25	; 0x1a
    2986:	ab 8f       	std	Y+27, r26	; 0x1b
    2988:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    298a:	69 8d       	ldd	r22, Y+25	; 0x19
    298c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    298e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2990:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	4a e7       	ldi	r20, 0x7A	; 122
    2998:	53 e4       	ldi	r21, 0x43	; 67
    299a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	8d 8b       	std	Y+21, r24	; 0x15
    29a4:	9e 8b       	std	Y+22, r25	; 0x16
    29a6:	af 8b       	std	Y+23, r26	; 0x17
    29a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29aa:	6d 89       	ldd	r22, Y+21	; 0x15
    29ac:	7e 89       	ldd	r23, Y+22	; 0x16
    29ae:	8f 89       	ldd	r24, Y+23	; 0x17
    29b0:	98 8d       	ldd	r25, Y+24	; 0x18
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	40 e8       	ldi	r20, 0x80	; 128
    29b8:	5f e3       	ldi	r21, 0x3F	; 63
    29ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29be:	88 23       	and	r24, r24
    29c0:	2c f4       	brge	.+10     	; 0x29cc <LCD_displayCharacter+0x256>
		__ticks = 1;
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	9c 8b       	std	Y+20, r25	; 0x14
    29c8:	8b 8b       	std	Y+19, r24	; 0x13
    29ca:	3f c0       	rjmp	.+126    	; 0x2a4a <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    29cc:	6d 89       	ldd	r22, Y+21	; 0x15
    29ce:	7e 89       	ldd	r23, Y+22	; 0x16
    29d0:	8f 89       	ldd	r24, Y+23	; 0x17
    29d2:	98 8d       	ldd	r25, Y+24	; 0x18
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	3f ef       	ldi	r19, 0xFF	; 255
    29d8:	4f e7       	ldi	r20, 0x7F	; 127
    29da:	57 e4       	ldi	r21, 0x47	; 71
    29dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29e0:	18 16       	cp	r1, r24
    29e2:	4c f5       	brge	.+82     	; 0x2a36 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e4:	69 8d       	ldd	r22, Y+25	; 0x19
    29e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	40 e2       	ldi	r20, 0x20	; 32
    29f2:	51 e4       	ldi	r21, 0x41	; 65
    29f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	bc 01       	movw	r22, r24
    29fe:	cd 01       	movw	r24, r26
    2a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	9c 8b       	std	Y+20, r25	; 0x14
    2a0a:	8b 8b       	std	Y+19, r24	; 0x13
    2a0c:	0f c0       	rjmp	.+30     	; 0x2a2c <LCD_displayCharacter+0x2b6>
    2a0e:	89 e1       	ldi	r24, 0x19	; 25
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	9a 8b       	std	Y+18, r25	; 0x12
    2a14:	89 8b       	std	Y+17, r24	; 0x11
    2a16:	89 89       	ldd	r24, Y+17	; 0x11
    2a18:	9a 89       	ldd	r25, Y+18	; 0x12
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <LCD_displayCharacter+0x2a4>
    2a1e:	9a 8b       	std	Y+18, r25	; 0x12
    2a20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a22:	8b 89       	ldd	r24, Y+19	; 0x13
    2a24:	9c 89       	ldd	r25, Y+20	; 0x14
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	9c 8b       	std	Y+20, r25	; 0x14
    2a2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a30:	00 97       	sbiw	r24, 0x00	; 0
    2a32:	69 f7       	brne	.-38     	; 0x2a0e <LCD_displayCharacter+0x298>
    2a34:	14 c0       	rjmp	.+40     	; 0x2a5e <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a36:	6d 89       	ldd	r22, Y+21	; 0x15
    2a38:	7e 89       	ldd	r23, Y+22	; 0x16
    2a3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	9c 8b       	std	Y+20, r25	; 0x14
    2a48:	8b 8b       	std	Y+19, r24	; 0x13
    2a4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a4e:	98 8b       	std	Y+16, r25	; 0x10
    2a50:	8f 87       	std	Y+15, r24	; 0x0f
    2a52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a54:	98 89       	ldd	r25, Y+16	; 0x10
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	f1 f7       	brne	.-4      	; 0x2a56 <LCD_displayCharacter+0x2e0>
    2a5a:	98 8b       	std	Y+16, r25	; 0x10
    2a5c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	62 e0       	ldi	r22, 0x02	; 2
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_writePin>
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	a0 e8       	ldi	r26, 0x80	; 128
    2a6e:	bf e3       	ldi	r27, 0x3F	; 63
    2a70:	8b 87       	std	Y+11, r24	; 0x0b
    2a72:	9c 87       	std	Y+12, r25	; 0x0c
    2a74:	ad 87       	std	Y+13, r26	; 0x0d
    2a76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	4a e7       	ldi	r20, 0x7A	; 122
    2a86:	53 e4       	ldi	r21, 0x43	; 67
    2a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	8f 83       	std	Y+7, r24	; 0x07
    2a92:	98 87       	std	Y+8, r25	; 0x08
    2a94:	a9 87       	std	Y+9, r26	; 0x09
    2a96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a98:	6f 81       	ldd	r22, Y+7	; 0x07
    2a9a:	78 85       	ldd	r23, Y+8	; 0x08
    2a9c:	89 85       	ldd	r24, Y+9	; 0x09
    2a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	40 e8       	ldi	r20, 0x80	; 128
    2aa6:	5f e3       	ldi	r21, 0x3F	; 63
    2aa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aac:	88 23       	and	r24, r24
    2aae:	2c f4       	brge	.+10     	; 0x2aba <LCD_displayCharacter+0x344>
		__ticks = 1;
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	9e 83       	std	Y+6, r25	; 0x06
    2ab6:	8d 83       	std	Y+5, r24	; 0x05
    2ab8:	3f c0       	rjmp	.+126    	; 0x2b38 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2aba:	6f 81       	ldd	r22, Y+7	; 0x07
    2abc:	78 85       	ldd	r23, Y+8	; 0x08
    2abe:	89 85       	ldd	r24, Y+9	; 0x09
    2ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	3f ef       	ldi	r19, 0xFF	; 255
    2ac6:	4f e7       	ldi	r20, 0x7F	; 127
    2ac8:	57 e4       	ldi	r21, 0x47	; 71
    2aca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ace:	18 16       	cp	r1, r24
    2ad0:	4c f5       	brge	.+82     	; 0x2b24 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	40 e2       	ldi	r20, 0x20	; 32
    2ae0:	51 e4       	ldi	r21, 0x41	; 65
    2ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	bc 01       	movw	r22, r24
    2aec:	cd 01       	movw	r24, r26
    2aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	9e 83       	std	Y+6, r25	; 0x06
    2af8:	8d 83       	std	Y+5, r24	; 0x05
    2afa:	0f c0       	rjmp	.+30     	; 0x2b1a <LCD_displayCharacter+0x3a4>
    2afc:	89 e1       	ldi	r24, 0x19	; 25
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	9c 83       	std	Y+4, r25	; 0x04
    2b02:	8b 83       	std	Y+3, r24	; 0x03
    2b04:	8b 81       	ldd	r24, Y+3	; 0x03
    2b06:	9c 81       	ldd	r25, Y+4	; 0x04
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	f1 f7       	brne	.-4      	; 0x2b08 <LCD_displayCharacter+0x392>
    2b0c:	9c 83       	std	Y+4, r25	; 0x04
    2b0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b10:	8d 81       	ldd	r24, Y+5	; 0x05
    2b12:	9e 81       	ldd	r25, Y+6	; 0x06
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	9e 83       	std	Y+6, r25	; 0x06
    2b18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1e:	00 97       	sbiw	r24, 0x00	; 0
    2b20:	69 f7       	brne	.-38     	; 0x2afc <LCD_displayCharacter+0x386>
    2b22:	14 c0       	rjmp	.+40     	; 0x2b4c <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b24:	6f 81       	ldd	r22, Y+7	; 0x07
    2b26:	78 85       	ldd	r23, Y+8	; 0x08
    2b28:	89 85       	ldd	r24, Y+9	; 0x09
    2b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	9e 83       	std	Y+6, r25	; 0x06
    2b36:	8d 83       	std	Y+5, r24	; 0x05
    2b38:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3c:	9a 83       	std	Y+2, r25	; 0x02
    2b3e:	89 83       	std	Y+1, r24	; 0x01
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
    2b42:	9a 81       	ldd	r25, Y+2	; 0x02
    2b44:	01 97       	sbiw	r24, 0x01	; 1
    2b46:	f1 f7       	brne	.-4      	; 0x2b44 <LCD_displayCharacter+0x3ce>
    2b48:	9a 83       	std	Y+2, r25	; 0x02
    2b4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2b4c:	e9 96       	adiw	r28, 0x39	; 57
    2b4e:	0f b6       	in	r0, 0x3f	; 63
    2b50:	f8 94       	cli
    2b52:	de bf       	out	0x3e, r29	; 62
    2b54:	0f be       	out	0x3f, r0	; 63
    2b56:	cd bf       	out	0x3d, r28	; 61
    2b58:	cf 91       	pop	r28
    2b5a:	df 91       	pop	r29
    2b5c:	08 95       	ret

00002b5e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2b5e:	df 93       	push	r29
    2b60:	cf 93       	push	r28
    2b62:	00 d0       	rcall	.+0      	; 0x2b64 <LCD_displayString+0x6>
    2b64:	0f 92       	push	r0
    2b66:	cd b7       	in	r28, 0x3d	; 61
    2b68:	de b7       	in	r29, 0x3e	; 62
    2b6a:	9b 83       	std	Y+3, r25	; 0x03
    2b6c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b6e:	19 82       	std	Y+1, r1	; 0x01
    2b70:	0e c0       	rjmp	.+28     	; 0x2b8e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	28 2f       	mov	r18, r24
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	e2 0f       	add	r30, r18
    2b80:	f3 1f       	adc	r31, r19
    2b82:	80 81       	ld	r24, Z
    2b84:	0e 94 bb 13 	call	0x2776	; 0x2776 <LCD_displayCharacter>
		i++;
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	8f 5f       	subi	r24, 0xFF	; 255
    2b8c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	28 2f       	mov	r18, r24
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	8a 81       	ldd	r24, Y+2	; 0x02
    2b96:	9b 81       	ldd	r25, Y+3	; 0x03
    2b98:	fc 01       	movw	r30, r24
    2b9a:	e2 0f       	add	r30, r18
    2b9c:	f3 1f       	adc	r31, r19
    2b9e:	80 81       	ld	r24, Z
    2ba0:	88 23       	and	r24, r24
    2ba2:	39 f7       	brne	.-50     	; 0x2b72 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	0f 90       	pop	r0
    2baa:	cf 91       	pop	r28
    2bac:	df 91       	pop	r29
    2bae:	08 95       	ret

00002bb0 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2bb0:	df 93       	push	r29
    2bb2:	cf 93       	push	r28
    2bb4:	00 d0       	rcall	.+0      	; 0x2bb6 <LCD_moveCursor+0x6>
    2bb6:	00 d0       	rcall	.+0      	; 0x2bb8 <LCD_moveCursor+0x8>
    2bb8:	0f 92       	push	r0
    2bba:	cd b7       	in	r28, 0x3d	; 61
    2bbc:	de b7       	in	r29, 0x3e	; 62
    2bbe:	8a 83       	std	Y+2, r24	; 0x02
    2bc0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc4:	28 2f       	mov	r18, r24
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	3d 83       	std	Y+5, r19	; 0x05
    2bca:	2c 83       	std	Y+4, r18	; 0x04
    2bcc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bce:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd0:	81 30       	cpi	r24, 0x01	; 1
    2bd2:	91 05       	cpc	r25, r1
    2bd4:	c1 f0       	breq	.+48     	; 0x2c06 <LCD_moveCursor+0x56>
    2bd6:	2c 81       	ldd	r18, Y+4	; 0x04
    2bd8:	3d 81       	ldd	r19, Y+5	; 0x05
    2bda:	22 30       	cpi	r18, 0x02	; 2
    2bdc:	31 05       	cpc	r19, r1
    2bde:	2c f4       	brge	.+10     	; 0x2bea <LCD_moveCursor+0x3a>
    2be0:	8c 81       	ldd	r24, Y+4	; 0x04
    2be2:	9d 81       	ldd	r25, Y+5	; 0x05
    2be4:	00 97       	sbiw	r24, 0x00	; 0
    2be6:	61 f0       	breq	.+24     	; 0x2c00 <LCD_moveCursor+0x50>
    2be8:	19 c0       	rjmp	.+50     	; 0x2c1c <LCD_moveCursor+0x6c>
    2bea:	2c 81       	ldd	r18, Y+4	; 0x04
    2bec:	3d 81       	ldd	r19, Y+5	; 0x05
    2bee:	22 30       	cpi	r18, 0x02	; 2
    2bf0:	31 05       	cpc	r19, r1
    2bf2:	69 f0       	breq	.+26     	; 0x2c0e <LCD_moveCursor+0x5e>
    2bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf6:	9d 81       	ldd	r25, Y+5	; 0x05
    2bf8:	83 30       	cpi	r24, 0x03	; 3
    2bfa:	91 05       	cpc	r25, r1
    2bfc:	61 f0       	breq	.+24     	; 0x2c16 <LCD_moveCursor+0x66>
    2bfe:	0e c0       	rjmp	.+28     	; 0x2c1c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2c00:	8b 81       	ldd	r24, Y+3	; 0x03
    2c02:	89 83       	std	Y+1, r24	; 0x01
    2c04:	0b c0       	rjmp	.+22     	; 0x2c1c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2c06:	8b 81       	ldd	r24, Y+3	; 0x03
    2c08:	80 5c       	subi	r24, 0xC0	; 192
    2c0a:	89 83       	std	Y+1, r24	; 0x01
    2c0c:	07 c0       	rjmp	.+14     	; 0x2c1c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c10:	80 5f       	subi	r24, 0xF0	; 240
    2c12:	89 83       	std	Y+1, r24	; 0x01
    2c14:	03 c0       	rjmp	.+6      	; 0x2c1c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	80 5b       	subi	r24, 0xB0	; 176
    2c1a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	80 68       	ori	r24, 0x80	; 128
    2c20:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_sendCommand>
}
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0
    2c2c:	0f 90       	pop	r0
    2c2e:	cf 91       	pop	r28
    2c30:	df 91       	pop	r29
    2c32:	08 95       	ret

00002c34 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2c34:	df 93       	push	r29
    2c36:	cf 93       	push	r28
    2c38:	00 d0       	rcall	.+0      	; 0x2c3a <LCD_displayStringRowColumn+0x6>
    2c3a:	00 d0       	rcall	.+0      	; 0x2c3c <LCD_displayStringRowColumn+0x8>
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
    2c40:	89 83       	std	Y+1, r24	; 0x01
    2c42:	6a 83       	std	Y+2, r22	; 0x02
    2c44:	5c 83       	std	Y+4, r21	; 0x04
    2c46:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	6a 81       	ldd	r22, Y+2	; 0x02
    2c4c:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2c50:	8b 81       	ldd	r24, Y+3	; 0x03
    2c52:	9c 81       	ldd	r25, Y+4	; 0x04
    2c54:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <LCD_displayString>
}
    2c58:	0f 90       	pop	r0
    2c5a:	0f 90       	pop	r0
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	cf 91       	pop	r28
    2c62:	df 91       	pop	r29
    2c64:	08 95       	ret

00002c66 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2c66:	df 93       	push	r29
    2c68:	cf 93       	push	r28
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
    2c6e:	62 97       	sbiw	r28, 0x12	; 18
    2c70:	0f b6       	in	r0, 0x3f	; 63
    2c72:	f8 94       	cli
    2c74:	de bf       	out	0x3e, r29	; 62
    2c76:	0f be       	out	0x3f, r0	; 63
    2c78:	cd bf       	out	0x3d, r28	; 61
    2c7a:	9a 8b       	std	Y+18, r25	; 0x12
    2c7c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2c7e:	89 89       	ldd	r24, Y+17	; 0x11
    2c80:	9a 89       	ldd	r25, Y+18	; 0x12
    2c82:	9e 01       	movw	r18, r28
    2c84:	2f 5f       	subi	r18, 0xFF	; 255
    2c86:	3f 4f       	sbci	r19, 0xFF	; 255
    2c88:	b9 01       	movw	r22, r18
    2c8a:	4a e0       	ldi	r20, 0x0A	; 10
    2c8c:	50 e0       	ldi	r21, 0x00	; 0
    2c8e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <itoa>
   LCD_displayString(buff); /* Display the string */
    2c92:	ce 01       	movw	r24, r28
    2c94:	01 96       	adiw	r24, 0x01	; 1
    2c96:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <LCD_displayString>
}
    2c9a:	62 96       	adiw	r28, 0x12	; 18
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	f8 94       	cli
    2ca0:	de bf       	out	0x3e, r29	; 62
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	cd bf       	out	0x3d, r28	; 61
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	08 95       	ret

00002cac <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_sendCommand>
}
    2cba:	cf 91       	pop	r28
    2cbc:	df 91       	pop	r29
    2cbe:	08 95       	ret

00002cc0 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init( UART_ConfigType* Config_Ptr)
{
    2cc0:	df 93       	push	r29
    2cc2:	cf 93       	push	r28
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <UART_init+0x6>
    2cc6:	00 d0       	rcall	.+0      	; 0x2cc8 <UART_init+0x8>
    2cc8:	cd b7       	in	r28, 0x3d	; 61
    2cca:	de b7       	in	r29, 0x3e	; 62
    2ccc:	9c 83       	std	Y+4, r25	; 0x04
    2cce:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2cd0:	1a 82       	std	Y+2, r1	; 0x02
    2cd2:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2cd4:	eb e2       	ldi	r30, 0x2B	; 43
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	82 e0       	ldi	r24, 0x02	; 2
    2cda:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2cdc:	ea e2       	ldi	r30, 0x2A	; 42
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	88 e1       	ldi	r24, 0x18	; 24
    2ce2:	80 83       	st	Z, r24
	UCSRB = (UCSRB & 0xFB) | ((Config_Ptr->No_bits_frame & 0x04));
    2ce4:	aa e2       	ldi	r26, 0x2A	; 42
    2ce6:	b0 e0       	ldi	r27, 0x00	; 0
    2ce8:	ea e2       	ldi	r30, 0x2A	; 42
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	80 81       	ld	r24, Z
    2cee:	98 2f       	mov	r25, r24
    2cf0:	9b 7f       	andi	r25, 0xFB	; 251
    2cf2:	eb 81       	ldd	r30, Y+3	; 0x03
    2cf4:	fc 81       	ldd	r31, Y+4	; 0x04
    2cf6:	80 81       	ld	r24, Z
    2cf8:	84 70       	andi	r24, 0x04	; 4
    2cfa:	89 2b       	or	r24, r25
    2cfc:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2cfe:	e0 e4       	ldi	r30, 0x40	; 64
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 e8       	ldi	r24, 0x80	; 128
    2d04:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xF9) | ( (Config_Ptr->No_bits_frame & 0x03)<<1);
    2d06:	a0 e4       	ldi	r26, 0x40	; 64
    2d08:	b0 e0       	ldi	r27, 0x00	; 0
    2d0a:	e0 e4       	ldi	r30, 0x40	; 64
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	28 2f       	mov	r18, r24
    2d12:	29 7f       	andi	r18, 0xF9	; 249
    2d14:	eb 81       	ldd	r30, Y+3	; 0x03
    2d16:	fc 81       	ldd	r31, Y+4	; 0x04
    2d18:	80 81       	ld	r24, Z
    2d1a:	88 2f       	mov	r24, r24
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	83 70       	andi	r24, 0x03	; 3
    2d20:	90 70       	andi	r25, 0x00	; 0
    2d22:	88 0f       	add	r24, r24
    2d24:	99 1f       	adc	r25, r25
    2d26:	82 2b       	or	r24, r18
    2d28:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ( (Config_Ptr->parity)<<4);
    2d2a:	a0 e4       	ldi	r26, 0x40	; 64
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	e0 e4       	ldi	r30, 0x40	; 64
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	28 2f       	mov	r18, r24
    2d36:	2f 7c       	andi	r18, 0xCF	; 207
    2d38:	eb 81       	ldd	r30, Y+3	; 0x03
    2d3a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d3c:	81 81       	ldd	r24, Z+1	; 0x01
    2d3e:	88 2f       	mov	r24, r24
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	82 95       	swap	r24
    2d44:	92 95       	swap	r25
    2d46:	90 7f       	andi	r25, 0xF0	; 240
    2d48:	98 27       	eor	r25, r24
    2d4a:	80 7f       	andi	r24, 0xF0	; 240
    2d4c:	98 27       	eor	r25, r24
    2d4e:	82 2b       	or	r24, r18
    2d50:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ( (Config_Ptr->No_stop_bits)<<3);
    2d52:	a0 e4       	ldi	r26, 0x40	; 64
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	e0 e4       	ldi	r30, 0x40	; 64
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	28 2f       	mov	r18, r24
    2d5e:	27 7f       	andi	r18, 0xF7	; 247
    2d60:	eb 81       	ldd	r30, Y+3	; 0x03
    2d62:	fc 81       	ldd	r31, Y+4	; 0x04
    2d64:	82 81       	ldd	r24, Z+2	; 0x02
    2d66:	88 2f       	mov	r24, r24
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	88 0f       	add	r24, r24
    2d6c:	99 1f       	adc	r25, r25
    2d6e:	88 0f       	add	r24, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	88 0f       	add	r24, r24
    2d74:	99 1f       	adc	r25, r25
    2d76:	82 2b       	or	r24, r18
    2d78:	8c 93       	st	X, r24
	

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2d7a:	eb 81       	ldd	r30, Y+3	; 0x03
    2d7c:	fc 81       	ldd	r31, Y+4	; 0x04
    2d7e:	83 81       	ldd	r24, Z+3	; 0x03
    2d80:	94 81       	ldd	r25, Z+4	; 0x04
    2d82:	a5 81       	ldd	r26, Z+5	; 0x05
    2d84:	b6 81       	ldd	r27, Z+6	; 0x06
    2d86:	88 0f       	add	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	aa 1f       	adc	r26, r26
    2d8c:	bb 1f       	adc	r27, r27
    2d8e:	88 0f       	add	r24, r24
    2d90:	99 1f       	adc	r25, r25
    2d92:	aa 1f       	adc	r26, r26
    2d94:	bb 1f       	adc	r27, r27
    2d96:	88 0f       	add	r24, r24
    2d98:	99 1f       	adc	r25, r25
    2d9a:	aa 1f       	adc	r26, r26
    2d9c:	bb 1f       	adc	r27, r27
    2d9e:	9c 01       	movw	r18, r24
    2da0:	ad 01       	movw	r20, r26
    2da2:	80 e4       	ldi	r24, 0x40	; 64
    2da4:	92 e4       	ldi	r25, 0x42	; 66
    2da6:	af e0       	ldi	r26, 0x0F	; 15
    2da8:	b0 e0       	ldi	r27, 0x00	; 0
    2daa:	bc 01       	movw	r22, r24
    2dac:	cd 01       	movw	r24, r26
    2dae:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__udivmodsi4>
    2db2:	da 01       	movw	r26, r20
    2db4:	c9 01       	movw	r24, r18
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	9a 83       	std	Y+2, r25	; 0x02
    2dba:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2dbc:	e0 e4       	ldi	r30, 0x40	; 64
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc4:	89 2f       	mov	r24, r25
    2dc6:	99 27       	eor	r25, r25
    2dc8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2dca:	e9 e2       	ldi	r30, 0x29	; 41
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	80 83       	st	Z, r24
}
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	cf 91       	pop	r28
    2ddc:	df 91       	pop	r29
    2dde:	08 95       	ret

00002de0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2de0:	df 93       	push	r29
    2de2:	cf 93       	push	r28
    2de4:	0f 92       	push	r0
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
    2dea:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2dec:	eb e2       	ldi	r30, 0x2B	; 43
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	80 81       	ld	r24, Z
    2df2:	88 2f       	mov	r24, r24
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	80 72       	andi	r24, 0x20	; 32
    2df8:	90 70       	andi	r25, 0x00	; 0
    2dfa:	00 97       	sbiw	r24, 0x00	; 0
    2dfc:	b9 f3       	breq	.-18     	; 0x2dec <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2dfe:	ec e2       	ldi	r30, 0x2C	; 44
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2e06:	0f 90       	pop	r0
    2e08:	cf 91       	pop	r28
    2e0a:	df 91       	pop	r29
    2e0c:	08 95       	ret

00002e0e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2e0e:	df 93       	push	r29
    2e10:	cf 93       	push	r28
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2e16:	eb e2       	ldi	r30, 0x2B	; 43
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	80 81       	ld	r24, Z
    2e1c:	88 23       	and	r24, r24
    2e1e:	dc f7       	brge	.-10     	; 0x2e16 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2e20:	ec e2       	ldi	r30, 0x2C	; 44
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
}
    2e26:	cf 91       	pop	r28
    2e28:	df 91       	pop	r29
    2e2a:	08 95       	ret

00002e2c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2e2c:	df 93       	push	r29
    2e2e:	cf 93       	push	r28
    2e30:	00 d0       	rcall	.+0      	; 0x2e32 <UART_sendString+0x6>
    2e32:	0f 92       	push	r0
    2e34:	cd b7       	in	r28, 0x3d	; 61
    2e36:	de b7       	in	r29, 0x3e	; 62
    2e38:	9b 83       	std	Y+3, r25	; 0x03
    2e3a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e3c:	19 82       	std	Y+1, r1	; 0x01
    2e3e:	0e c0       	rjmp	.+28     	; 0x2e5c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	28 2f       	mov	r18, r24
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	8a 81       	ldd	r24, Y+2	; 0x02
    2e48:	9b 81       	ldd	r25, Y+3	; 0x03
    2e4a:	fc 01       	movw	r30, r24
    2e4c:	e2 0f       	add	r30, r18
    2e4e:	f3 1f       	adc	r31, r19
    2e50:	80 81       	ld	r24, Z
    2e52:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <UART_sendByte>
		i++;
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
    2e58:	8f 5f       	subi	r24, 0xFF	; 255
    2e5a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	28 2f       	mov	r18, r24
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	8a 81       	ldd	r24, Y+2	; 0x02
    2e64:	9b 81       	ldd	r25, Y+3	; 0x03
    2e66:	fc 01       	movw	r30, r24
    2e68:	e2 0f       	add	r30, r18
    2e6a:	f3 1f       	adc	r31, r19
    2e6c:	80 81       	ld	r24, Z
    2e6e:	88 23       	and	r24, r24
    2e70:	39 f7       	brne	.-50     	; 0x2e40 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2e72:	0f 90       	pop	r0
    2e74:	0f 90       	pop	r0
    2e76:	0f 90       	pop	r0
    2e78:	cf 91       	pop	r28
    2e7a:	df 91       	pop	r29
    2e7c:	08 95       	ret

00002e7e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2e7e:	0f 93       	push	r16
    2e80:	1f 93       	push	r17
    2e82:	df 93       	push	r29
    2e84:	cf 93       	push	r28
    2e86:	00 d0       	rcall	.+0      	; 0x2e88 <UART_receiveString+0xa>
    2e88:	0f 92       	push	r0
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
    2e8e:	9b 83       	std	Y+3, r25	; 0x03
    2e90:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e92:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2e94:	89 81       	ldd	r24, Y+1	; 0x01
    2e96:	28 2f       	mov	r18, r24
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e9e:	8c 01       	movw	r16, r24
    2ea0:	02 0f       	add	r16, r18
    2ea2:	13 1f       	adc	r17, r19
    2ea4:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <UART_recieveByte>
    2ea8:	f8 01       	movw	r30, r16
    2eaa:	80 83       	st	Z, r24
    2eac:	0f c0       	rjmp	.+30     	; 0x2ecc <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	8f 5f       	subi	r24, 0xFF	; 255
    2eb2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	28 2f       	mov	r18, r24
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ebe:	8c 01       	movw	r16, r24
    2ec0:	02 0f       	add	r16, r18
    2ec2:	13 1f       	adc	r17, r19
    2ec4:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <UART_recieveByte>
    2ec8:	f8 01       	movw	r30, r16
    2eca:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	28 2f       	mov	r18, r24
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	e2 0f       	add	r30, r18
    2eda:	f3 1f       	adc	r31, r19
    2edc:	80 81       	ld	r24, Z
    2ede:	83 32       	cpi	r24, 0x23	; 35
    2ee0:	31 f7       	brne	.-52     	; 0x2eae <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2ee2:	89 81       	ldd	r24, Y+1	; 0x01
    2ee4:	28 2f       	mov	r18, r24
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eea:	9b 81       	ldd	r25, Y+3	; 0x03
    2eec:	fc 01       	movw	r30, r24
    2eee:	e2 0f       	add	r30, r18
    2ef0:	f3 1f       	adc	r31, r19
    2ef2:	10 82       	st	Z, r1
}
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	0f 90       	pop	r0
    2efa:	cf 91       	pop	r28
    2efc:	df 91       	pop	r29
    2efe:	1f 91       	pop	r17
    2f00:	0f 91       	pop	r16
    2f02:	08 95       	ret

00002f04 <__udivmodsi4>:
    2f04:	a1 e2       	ldi	r26, 0x21	; 33
    2f06:	1a 2e       	mov	r1, r26
    2f08:	aa 1b       	sub	r26, r26
    2f0a:	bb 1b       	sub	r27, r27
    2f0c:	fd 01       	movw	r30, r26
    2f0e:	0d c0       	rjmp	.+26     	; 0x2f2a <__udivmodsi4_ep>

00002f10 <__udivmodsi4_loop>:
    2f10:	aa 1f       	adc	r26, r26
    2f12:	bb 1f       	adc	r27, r27
    2f14:	ee 1f       	adc	r30, r30
    2f16:	ff 1f       	adc	r31, r31
    2f18:	a2 17       	cp	r26, r18
    2f1a:	b3 07       	cpc	r27, r19
    2f1c:	e4 07       	cpc	r30, r20
    2f1e:	f5 07       	cpc	r31, r21
    2f20:	20 f0       	brcs	.+8      	; 0x2f2a <__udivmodsi4_ep>
    2f22:	a2 1b       	sub	r26, r18
    2f24:	b3 0b       	sbc	r27, r19
    2f26:	e4 0b       	sbc	r30, r20
    2f28:	f5 0b       	sbc	r31, r21

00002f2a <__udivmodsi4_ep>:
    2f2a:	66 1f       	adc	r22, r22
    2f2c:	77 1f       	adc	r23, r23
    2f2e:	88 1f       	adc	r24, r24
    2f30:	99 1f       	adc	r25, r25
    2f32:	1a 94       	dec	r1
    2f34:	69 f7       	brne	.-38     	; 0x2f10 <__udivmodsi4_loop>
    2f36:	60 95       	com	r22
    2f38:	70 95       	com	r23
    2f3a:	80 95       	com	r24
    2f3c:	90 95       	com	r25
    2f3e:	9b 01       	movw	r18, r22
    2f40:	ac 01       	movw	r20, r24
    2f42:	bd 01       	movw	r22, r26
    2f44:	cf 01       	movw	r24, r30
    2f46:	08 95       	ret

00002f48 <__prologue_saves__>:
    2f48:	2f 92       	push	r2
    2f4a:	3f 92       	push	r3
    2f4c:	4f 92       	push	r4
    2f4e:	5f 92       	push	r5
    2f50:	6f 92       	push	r6
    2f52:	7f 92       	push	r7
    2f54:	8f 92       	push	r8
    2f56:	9f 92       	push	r9
    2f58:	af 92       	push	r10
    2f5a:	bf 92       	push	r11
    2f5c:	cf 92       	push	r12
    2f5e:	df 92       	push	r13
    2f60:	ef 92       	push	r14
    2f62:	ff 92       	push	r15
    2f64:	0f 93       	push	r16
    2f66:	1f 93       	push	r17
    2f68:	cf 93       	push	r28
    2f6a:	df 93       	push	r29
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	ca 1b       	sub	r28, r26
    2f72:	db 0b       	sbc	r29, r27
    2f74:	0f b6       	in	r0, 0x3f	; 63
    2f76:	f8 94       	cli
    2f78:	de bf       	out	0x3e, r29	; 62
    2f7a:	0f be       	out	0x3f, r0	; 63
    2f7c:	cd bf       	out	0x3d, r28	; 61
    2f7e:	09 94       	ijmp

00002f80 <__epilogue_restores__>:
    2f80:	2a 88       	ldd	r2, Y+18	; 0x12
    2f82:	39 88       	ldd	r3, Y+17	; 0x11
    2f84:	48 88       	ldd	r4, Y+16	; 0x10
    2f86:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f88:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f90:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f92:	b9 84       	ldd	r11, Y+9	; 0x09
    2f94:	c8 84       	ldd	r12, Y+8	; 0x08
    2f96:	df 80       	ldd	r13, Y+7	; 0x07
    2f98:	ee 80       	ldd	r14, Y+6	; 0x06
    2f9a:	fd 80       	ldd	r15, Y+5	; 0x05
    2f9c:	0c 81       	ldd	r16, Y+4	; 0x04
    2f9e:	1b 81       	ldd	r17, Y+3	; 0x03
    2fa0:	aa 81       	ldd	r26, Y+2	; 0x02
    2fa2:	b9 81       	ldd	r27, Y+1	; 0x01
    2fa4:	ce 0f       	add	r28, r30
    2fa6:	d1 1d       	adc	r29, r1
    2fa8:	0f b6       	in	r0, 0x3f	; 63
    2faa:	f8 94       	cli
    2fac:	de bf       	out	0x3e, r29	; 62
    2fae:	0f be       	out	0x3f, r0	; 63
    2fb0:	cd bf       	out	0x3d, r28	; 61
    2fb2:	ed 01       	movw	r28, r26
    2fb4:	08 95       	ret

00002fb6 <itoa>:
    2fb6:	fb 01       	movw	r30, r22
    2fb8:	9f 01       	movw	r18, r30
    2fba:	e8 94       	clt
    2fbc:	42 30       	cpi	r20, 0x02	; 2
    2fbe:	c4 f0       	brlt	.+48     	; 0x2ff0 <itoa+0x3a>
    2fc0:	45 32       	cpi	r20, 0x25	; 37
    2fc2:	b4 f4       	brge	.+44     	; 0x2ff0 <itoa+0x3a>
    2fc4:	4a 30       	cpi	r20, 0x0A	; 10
    2fc6:	29 f4       	brne	.+10     	; 0x2fd2 <itoa+0x1c>
    2fc8:	97 fb       	bst	r25, 7
    2fca:	1e f4       	brtc	.+6      	; 0x2fd2 <itoa+0x1c>
    2fcc:	90 95       	com	r25
    2fce:	81 95       	neg	r24
    2fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd2:	64 2f       	mov	r22, r20
    2fd4:	77 27       	eor	r23, r23
    2fd6:	0e 94 0c 18 	call	0x3018	; 0x3018 <__udivmodhi4>
    2fda:	80 5d       	subi	r24, 0xD0	; 208
    2fdc:	8a 33       	cpi	r24, 0x3A	; 58
    2fde:	0c f0       	brlt	.+2      	; 0x2fe2 <itoa+0x2c>
    2fe0:	89 5d       	subi	r24, 0xD9	; 217
    2fe2:	81 93       	st	Z+, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	00 97       	sbiw	r24, 0x00	; 0
    2fe8:	a1 f7       	brne	.-24     	; 0x2fd2 <itoa+0x1c>
    2fea:	16 f4       	brtc	.+4      	; 0x2ff0 <itoa+0x3a>
    2fec:	5d e2       	ldi	r21, 0x2D	; 45
    2fee:	51 93       	st	Z+, r21
    2ff0:	10 82       	st	Z, r1
    2ff2:	c9 01       	movw	r24, r18
    2ff4:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <strrev>

00002ff8 <strrev>:
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	fc 01       	movw	r30, r24
    2ffc:	67 2f       	mov	r22, r23
    2ffe:	71 91       	ld	r23, Z+
    3000:	77 23       	and	r23, r23
    3002:	e1 f7       	brne	.-8      	; 0x2ffc <strrev+0x4>
    3004:	32 97       	sbiw	r30, 0x02	; 2
    3006:	04 c0       	rjmp	.+8      	; 0x3010 <strrev+0x18>
    3008:	7c 91       	ld	r23, X
    300a:	6d 93       	st	X+, r22
    300c:	70 83       	st	Z, r23
    300e:	62 91       	ld	r22, -Z
    3010:	ae 17       	cp	r26, r30
    3012:	bf 07       	cpc	r27, r31
    3014:	c8 f3       	brcs	.-14     	; 0x3008 <strrev+0x10>
    3016:	08 95       	ret

00003018 <__udivmodhi4>:
    3018:	aa 1b       	sub	r26, r26
    301a:	bb 1b       	sub	r27, r27
    301c:	51 e1       	ldi	r21, 0x11	; 17
    301e:	07 c0       	rjmp	.+14     	; 0x302e <__udivmodhi4_ep>

00003020 <__udivmodhi4_loop>:
    3020:	aa 1f       	adc	r26, r26
    3022:	bb 1f       	adc	r27, r27
    3024:	a6 17       	cp	r26, r22
    3026:	b7 07       	cpc	r27, r23
    3028:	10 f0       	brcs	.+4      	; 0x302e <__udivmodhi4_ep>
    302a:	a6 1b       	sub	r26, r22
    302c:	b7 0b       	sbc	r27, r23

0000302e <__udivmodhi4_ep>:
    302e:	88 1f       	adc	r24, r24
    3030:	99 1f       	adc	r25, r25
    3032:	5a 95       	dec	r21
    3034:	a9 f7       	brne	.-22     	; 0x3020 <__udivmodhi4_loop>
    3036:	80 95       	com	r24
    3038:	90 95       	com	r25
    303a:	bc 01       	movw	r22, r24
    303c:	cd 01       	movw	r24, r26
    303e:	08 95       	ret

00003040 <_exit>:
    3040:	f8 94       	cli

00003042 <__stop_program>:
    3042:	ff cf       	rjmp	.-2      	; 0x3042 <__stop_program>
